1
00:00:00,000 --> 00:00:02,500
I sure hope you're hungry!

2
00:00:02,500 --> 00:00:04,200
Cool, I'm starving!

3
00:00:04,200 --> 00:00:08,100
Wash those hands, pull up a chair, and secure that feedback.

4
00:00:08,100 --> 00:00:14,200
Because it's time to listen to Scott Tolinsky and Wes Boss attempt to use human language to converse with

5
00:00:14,200 --> 00:00:16,800
and pick the brains of other developers.

6
00:00:16,800 --> 00:00:18,800
I thought there was gonna be food!

7
00:00:18,800 --> 00:00:21,700
So buckle up and grab that old f***ing handle

8
00:00:21,700 --> 00:00:25,000
because this ride is going to get wild!

9
00:00:26,000 --> 00:00:27,300
This is...

10
00:00:27,300 --> 00:00:29,700
The Syntax Supper Club!

11
00:00:30,000 --> 00:00:38,500
Welcome to Syntax!

12
00:00:38,500 --> 00:00:41,500
The podcast with the tastiest web development treats out there.

13
00:00:41,500 --> 00:00:44,500
We've got another banger Supper Club for you today.

14
00:00:44,500 --> 00:00:46,500
We have somebody who has...

15
00:00:46,500 --> 00:00:48,500
I'm gonna admit it, a cooler name than I have.

16
00:00:48,500 --> 00:00:53,000
Dax Rad is on today to talk about...

17
00:00:53,000 --> 00:00:56,900
I think we're just gonna be talking mostly about serverless hosting Next.js.

18
00:00:56,900 --> 00:00:58,900
He's behind a couple different projects.

19
00:00:58,900 --> 00:01:01,400
SST as well as Open Next.js.

20
00:01:01,400 --> 00:01:03,400
We're excited to talk all about that.

21
00:01:03,400 --> 00:01:04,400
Welcome, Dax. How you doing?

22
00:01:04,400 --> 00:01:05,900
I'm doing great. Thanks for having me on.

23
00:01:05,900 --> 00:01:07,400
You're welcome. You're welcome.

24
00:01:07,400 --> 00:01:09,400
We're sponsored today by Sentry.

25
00:01:09,400 --> 00:01:11,400
Let's talk about their new APM.

26
00:01:11,400 --> 00:01:12,400
What is APM?

27
00:01:12,400 --> 00:01:14,400
Application, Performance, Monitor.

28
00:01:14,400 --> 00:01:16,400
So what that will do is...

29
00:01:16,400 --> 00:01:21,400
You're throwing your application and it's sort of trying to monitor things that will make your website slow.

30
00:01:21,400 --> 00:01:26,400
We had a show a couple days ago about slow websites and what could possibly cause it.

31
00:01:26,400 --> 00:01:30,400
So what Sentry will do is it will detect common things.

32
00:01:30,400 --> 00:01:35,400
Large render blocking assets, slow database queries, file IO on the main thread.

33
00:01:35,400 --> 00:01:37,400
That's probably not something you want to do.

34
00:01:37,400 --> 00:01:42,400
You know, in Node, you have that right file sync, which is...

35
00:01:42,400 --> 00:01:44,400
That will block up your main thread.

36
00:01:44,400 --> 00:01:50,400
Anything else running on that main thread will not be able to go until you've actually finished writing that file.

37
00:01:50,400 --> 00:01:52,400
So that could be a big, big no-no.

38
00:01:52,400 --> 00:01:54,400
You're gonna want to check it out.

39
00:01:54,400 --> 00:01:56,400
There's lots in this APM.

40
00:01:56,400 --> 00:02:00,400
I'm sure I'll go into the features of it over the next couple of ad reads.

41
00:02:00,400 --> 00:02:02,400
You want to check it out at Sentry.io.

42
00:02:02,400 --> 00:02:05,400
Use a coupon code, tastytreat, for two months for free.

43
00:02:05,400 --> 00:02:12,400
I also want to check out their blog post, which is the new APM actionable, affordable, and actually built for developers.

44
00:02:12,400 --> 00:02:14,400
Thank you, Sentry, for sponsoring.

45
00:02:14,400 --> 00:02:20,400
We'll start this by just saying 2023, I said, is my year for AWS.

46
00:02:20,400 --> 00:02:25,400
So I've been looking at some of my server bills and whatnot.

47
00:02:25,400 --> 00:02:30,400
And I say, man, this is real expensive to be able to do this stuff.

48
00:02:30,400 --> 00:02:35,400
And then I look over at AWS and I go, that's too hard.

49
00:02:35,400 --> 00:02:40,400
And I'm stuck in this position of something is very expensive and obviously easy,

50
00:02:40,400 --> 00:02:44,400
versus something that is, I think, cheaper.

51
00:02:44,400 --> 00:02:45,400
We'll see.

52
00:02:45,400 --> 00:02:48,400
But it's just like, there's so many pieces to it.

53
00:02:48,400 --> 00:02:53,400
So we're trying to, like this year, we're trying to get a little bit more into AWS and understand all the different parts and whatnot.

54
00:02:53,400 --> 00:02:58,400
So you're the first person that we're having on to sort of talk about that type of stuff.

55
00:02:58,400 --> 00:03:02,400
Let's talk about, you want to give like a quick rundown of who you are and what you do.

56
00:03:02,400 --> 00:03:07,400
And then I thought we'll get into the open next year stuff first and then we'll get into the SST stuff.

57
00:03:07,400 --> 00:03:08,400
Yeah, sounds good.

58
00:03:08,400 --> 00:03:10,400
So again, my name is Dax.

59
00:03:10,400 --> 00:03:14,400
I work entirely on open source to a pretty lucky situation that I'm in.

60
00:03:14,400 --> 00:03:18,400
The primary project that I work on is called SST.

61
00:03:18,400 --> 00:03:27,400
It's a framework that helps people like yourself start to build things on AWS without fully being exposed to the monstrosity that is AWS.

62
00:03:27,400 --> 00:03:31,400
Because like you said, there's a lot of great reasons to be building on AWS,

63
00:03:31,400 --> 00:03:36,400
especially for things that are a little bit more serious and as you start to get to a certain scale.

64
00:03:36,400 --> 00:03:40,400
But it's pretty unapproachable for the average person.

65
00:03:40,400 --> 00:03:46,400
So our job is to really go dig through all the AWS docs, read everything,

66
00:03:46,400 --> 00:03:52,400
figure out all the little weird quirks and then expose something that makes a lot more sense for the end user,

67
00:03:52,400 --> 00:03:59,400
figure out what kind of rough edges there are on their day to day development cycles and make all that smoother.

68
00:03:59,400 --> 00:04:04,400
I'll start this with a question is, and I went down this rabbit hole the other day.

69
00:04:04,400 --> 00:04:10,400
I put a tweet out where I logged into AWS and I looked at some of the profiles I had created.

70
00:04:10,400 --> 00:04:13,400
And one of them was 12 years old.

71
00:04:13,400 --> 00:04:16,400
And I tweeted like, has it gotten any better in about 12 years?

72
00:04:16,400 --> 00:04:19,400
And half people are like, no, and half the people are yes.

73
00:04:19,400 --> 00:04:25,400
So I was like, I just want to deploy a serverless function raw to AWS.

74
00:04:25,400 --> 00:04:29,400
And I like got into it and like there's no build pipeline and there's all these products.

75
00:04:29,400 --> 00:04:35,400
Why does AWS not have something like Netlify or Vercel?

76
00:04:35,400 --> 00:04:37,400
Or like, why don't they have that?

77
00:04:37,400 --> 00:04:42,400
And like, why is there all these businesses built up on top of AWS being easier?

78
00:04:42,400 --> 00:04:48,400
The thing is AWS does think they have that and they have like three or four attempts at building something like Netlify

79
00:04:48,400 --> 00:04:51,400
or Vercel or Heroku or whatever.

80
00:04:51,400 --> 00:04:52,400
I think I forgot who it was.

81
00:04:52,400 --> 00:04:55,400
Someone documented all different ways to deploy a container.

82
00:04:55,400 --> 00:05:00,400
And there's like something create like 18 different ways that you can do it because they represent all these attempts at

83
00:05:00,400 --> 00:05:06,400
AWS trying to create a higher level abstraction for to make some of these things simpler.

84
00:05:06,400 --> 00:05:08,400
I just don't think it's in their DNA.

85
00:05:08,400 --> 00:05:11,400
They are an infrastructure hyperscaler company.

86
00:05:11,400 --> 00:05:17,400
They're about deploying like a crazy amount of physical hardware across the whole world, have it working.

87
00:05:17,400 --> 00:05:22,400
That is really far removed to what a developer experiences day to day when they're trying to build something.

88
00:05:23,400 --> 00:05:25,400
I think it's an awkward fit for them culturally.

89
00:05:25,400 --> 00:05:26,400
Interesting.

90
00:05:26,400 --> 00:05:30,400
Yeah, it does feel like that's been a long time thing forever.

91
00:05:30,400 --> 00:05:41,400
I mean, even into Amazon.com itself, they've never had the polish, I think, in the UI department that many other companies have.

92
00:05:41,400 --> 00:05:45,400
And that does seem to turn off people from AWS.

93
00:05:45,400 --> 00:05:51,400
And like you mentioned, Wes, it opens up the door for all these other businesses that are built on top of AWS just to make it

94
00:05:51,400 --> 00:05:53,400
easier on folks, right?

95
00:05:53,400 --> 00:06:01,400
So do you think it's a positive thing that AWS hasn't figured this out because it enables all these other companies to exist?

96
00:06:01,400 --> 00:06:04,400
Or do you think they'll get there eventually?

97
00:06:04,400 --> 00:06:10,400
Yeah, I think for me, I always, I find myself in a tricky situation because I'll be trying to do something at AWS.

98
00:06:10,400 --> 00:06:13,400
I'll be really frustrated and wish that it was better.

99
00:06:13,400 --> 00:06:17,400
And I'll be annoyed with the teams behind certain services that are creating these problems.

100
00:06:17,400 --> 00:06:23,400
And then I'll realize, oh, well, if they were actually doing all those things, I wouldn't really have a job.

101
00:06:23,400 --> 00:06:26,400
So I definitely appreciate the gap that it creates.

102
00:06:26,400 --> 00:06:28,400
I think it is a good system.

103
00:06:28,400 --> 00:06:31,400
AWS's scope is just massive.

104
00:06:31,400 --> 00:06:34,400
They're trying to serve every possible business out there.

105
00:06:34,400 --> 00:06:38,400
And the reality is to build good services.

106
00:06:38,400 --> 00:06:40,400
You do have to narrow your scope a lot.

107
00:06:40,400 --> 00:06:46,400
A lot of these companies that people like, like Versailles or Netlify, their scope is a lot narrower in terms of what they try to offer

108
00:06:46,400 --> 00:06:50,400
and who they try to serve than what AWS can do.

109
00:06:50,400 --> 00:06:52,400
And that's kind of why they have a good product.

110
00:06:52,400 --> 00:07:01,400
And I think at some, I think there's a reality of it where at the scope the AWS has, it just, you just can't really build anything that great.

111
00:07:01,400 --> 00:07:04,400
All right, let's get into the open Next.js stuff.

112
00:07:04,400 --> 00:07:10,400
So Next.js, huge, probably the largest React framework for building a website out there.

113
00:07:10,400 --> 00:07:12,400
It sort of encompasses a lot.

114
00:07:13,400 --> 00:07:18,400
And it is obviously very tightly, not tightly, but it is, it's the baby of Versailles.

115
00:07:18,400 --> 00:07:28,400
And Versailles is this amazing hosting platform that does images and CDN and caching and deploy previews and serverless and edge functions.

116
00:07:28,400 --> 00:07:30,400
And they do all the stuff.

117
00:07:30,400 --> 00:07:37,400
And the like experience of writing an XJS app and hosting it on Versailles is a very, very nice experience.

118
00:07:38,400 --> 00:07:42,400
We host the, that's the exact stack and hosting platform we use for the syntax website.

119
00:07:42,400 --> 00:07:50,400
But there's often been people saying, well, it's not that easy to host an XJS site anywhere else.

120
00:07:50,400 --> 00:07:53,400
They provide some sort of, some outlets and whatnot.

121
00:07:53,400 --> 00:07:58,400
So do you want to give us like a rundown of like, what is the open Next.js project?

122
00:07:58,400 --> 00:08:05,400
Yeah, so I think the premise is, like you said, Next.js hosted on Versailles is an incredible experience.

123
00:08:06,400 --> 00:08:12,400
And trying to host it in other places, you kind of have a variety of different, different options and variety of different experiences you can have.

124
00:08:12,400 --> 00:08:15,400
So you can self host Next.js in a container.

125
00:08:15,400 --> 00:08:22,400
It's pretty easy for Versailles to support that because it's just a long running process that can literally just do everything that they needed to do.

126
00:08:22,400 --> 00:08:28,400
But for a lot of people self hosting Next.js in a container is pretty different than what they get from Versailles.

127
00:08:28,400 --> 00:08:31,400
Just in terms of costs, yes, I mean, it's always running.

128
00:08:31,400 --> 00:08:38,400
It's a little bit, it's a lot more expensive to have like global availability, things like that when you have to deploy containers everywhere.

129
00:08:38,400 --> 00:08:50,400
When most people think of I want to self host Next.js, they expect it to be entirely serverless, deploying to functions and kind of serverless primitives that AWS offers.

130
00:08:50,400 --> 00:08:54,400
And the process for doing that isn't actually straightforward.

131
00:08:55,400 --> 00:08:58,400
I'm not going to say Versailles like explicitly doesn't let you do that.

132
00:08:58,400 --> 00:09:08,400
They actually do put in a lot of effort in creating standard outputs so that you can take an Next.js app and potentially get it to be self hosted in AWS.

133
00:09:08,400 --> 00:09:15,400
But the gap there of what you get from that build output to actually deploying is pretty massive.

134
00:09:15,400 --> 00:09:17,400
You need to one be an expert in AWS.

135
00:09:17,400 --> 00:09:20,400
You really need to understand the different ways you can do things.

136
00:09:20,400 --> 00:09:29,400
You also need to understand pretty detailed internals of Next.js, understand different components that Next actually offers.

137
00:09:29,400 --> 00:09:32,400
And there's not just a single way you can deploy AWS.

138
00:09:32,400 --> 00:09:35,400
There's a lot of different ways you can deploy with different trade offs.

139
00:09:35,400 --> 00:09:40,400
You can, you know, some functionality just cannot work in an entirely of some environment.

140
00:09:40,400 --> 00:09:44,400
It's really difficult and takes a lot of man hours to just figure that out.

141
00:09:45,400 --> 00:09:50,400
So that's what we started to open Next project because there were a lot of kind of disparate efforts of doing this.

142
00:09:50,400 --> 00:09:55,400
We had a, there's like an older project called serverless Next.js that a lot of companies were using.

143
00:09:55,400 --> 00:10:01,400
In fact, AWS even used to use this open source project internally to power their Next.js offering.

144
00:10:01,400 --> 00:10:04,400
Of course, like one person cannot maintain that long term.

145
00:10:04,400 --> 00:10:08,400
That project kind of died and have kind of few offshoots of trying to do this.

146
00:10:08,400 --> 00:10:17,400
And there was enough interest in our community of people wanting to run Next.js in AWS where we avoided building this project for a while.

147
00:10:17,400 --> 00:10:19,400
We really didn't want to do it just because it's a lot of work.

148
00:10:19,400 --> 00:10:24,400
But we got to a point where there was enough expertise in the community for us to actually go ahead and build that.

149
00:10:24,400 --> 00:10:29,400
So how many people are involved in an effort like this?

150
00:10:29,400 --> 00:10:34,400
Yeah. So from our core team, we have Frank who pretty much leads this effort.

151
00:10:34,400 --> 00:10:36,400
He spends a lot of time on this.

152
00:10:36,400 --> 00:10:42,400
There is a little bit of upfront work, you know, to get to a place where there is one-to-one parity with what Vercel offers.

153
00:10:42,400 --> 00:10:44,400
And then from there, it's more maintenance.

154
00:10:44,400 --> 00:10:49,400
And then in terms of help in the community, I think we have like five or six people that are pretty much talking about this all day.

155
00:10:49,400 --> 00:10:57,400
None of us at SST are actually Next.js users, which is kind of funny because we're the ones that are behind this effort.

156
00:10:57,400 --> 00:11:01,400
So we're not experts in the details of how Next.js should work or it's exact features.

157
00:11:01,400 --> 00:11:06,400
We really rely on our community to report how things are working and what things aren't exactly right.

158
00:11:06,400 --> 00:11:14,400
And they find a lot of really obscure things like they'll figure out, oh, we need to pass this explicit header for like this very specific feature to work, things like that.

159
00:11:14,400 --> 00:11:23,400
Let's move through the different parts of Next.js and we'll sort of like map those to what are the Amazon products.

160
00:11:23,400 --> 00:11:28,400
So at its very core, Next.js splits its routes.

161
00:11:28,400 --> 00:11:33,400
So every time you go to a URL, it makes that into a serverless function. Is that right?

162
00:11:33,400 --> 00:11:36,400
So not exactly.

163
00:11:36,400 --> 00:11:43,400
So the build output outputs a single function that handles all of your routes.

164
00:11:43,400 --> 00:11:50,400
So that means it's all bundled into like one kind of fat lambda function.

165
00:11:50,400 --> 00:11:55,400
And then they do have their edge function concept, which is a little bit separate.

166
00:11:55,400 --> 00:12:04,400
Okay, so literally every single route is all bundled into one app and run on one serverless function.

167
00:12:04,400 --> 00:12:09,400
Because I remember when Vercel was, was it now?

168
00:12:09,400 --> 00:12:11,400
And they moved away from node.

169
00:12:11,400 --> 00:12:17,400
And I had an express app running on node and they're like, yeah, just throw it in a lambda function.

170
00:12:17,400 --> 00:12:19,400
And it's like that it doesn't fit.

171
00:12:19,400 --> 00:12:22,400
Like it's way too large for that type of thing.

172
00:12:22,400 --> 00:12:24,400
So like, is there a hard limit?

173
00:12:24,400 --> 00:12:27,400
For some reason, I thought that they split it up per URL.

174
00:12:27,400 --> 00:12:34,400
So they're literally throwing your entire application back end API routes and everything into one serverless function.

175
00:12:34,400 --> 00:12:41,400
Well, so I suspect what Vercel does internally might be a little bit different than the build output that the open source Next.js produces.

176
00:12:41,400 --> 00:12:42,400
So yeah, you're right.

177
00:12:42,400 --> 00:12:45,400
Bundling everything to a single function is not great long term.

178
00:12:45,400 --> 00:12:49,400
If you have one dependency on one route, that is really large.

179
00:12:49,400 --> 00:12:53,400
Something that's hitting the cold starts of like all the routes in your application.

180
00:12:53,400 --> 00:13:00,400
So I suspect that Next.js or Vercel might, when they deploy on to their platform, they might do some kind of splitting.

181
00:13:00,400 --> 00:13:01,400
It's challenging.

182
00:13:01,400 --> 00:13:04,400
It's easy with stuff like API routes, like API routes split nicely.

183
00:13:04,400 --> 00:13:10,400
But it is a little bit trickier with with UI routes that nests and especially with the new app layout stuff.

184
00:13:10,400 --> 00:13:22,400
Yeah, yeah, that always got me not just on Next.js, but in general, where it's like, yeah, you put everything into your own and every single route has its own package JSON.

185
00:13:22,400 --> 00:13:27,400
And that's annoying to me because I was like, I don't want every package JSON for every single function.

186
00:13:27,400 --> 00:13:32,400
And then other people say, well, okay, now you have the special package that shared code.

187
00:13:32,400 --> 00:13:37,400
And you can put anything you want in there that shared code, but then I'm like, well, okay, now I have to decide.

188
00:13:37,400 --> 00:13:41,400
Can I just put it where I want it and it will like figure it out from there?

189
00:13:41,400 --> 00:13:50,400
And I'm assuming, or I'm not assuming, maybe that's what Vercel does on their end is they do a bunch of tree shaking or whatnot to make the functions as small as possible.

190
00:13:50,400 --> 00:13:55,400
Because nice and small that deploy super quick, you get nice cold starts.

191
00:13:55,400 --> 00:13:58,400
It's really sweet when that stuff does work.

192
00:13:58,400 --> 00:14:01,400
Yeah, and that's a pattern that we actually encourage.

193
00:14:01,400 --> 00:14:04,400
Our main framework SST, we talk about something similar.

194
00:14:04,400 --> 00:14:10,400
You don't want to, at author time, you don't want to think about it as like these complete discrete separate things.

195
00:14:10,400 --> 00:14:13,400
You want to build like one big application.

196
00:14:13,400 --> 00:14:16,400
And at deploy time, you want it to be broken down and tree shaking and all that.

197
00:14:16,400 --> 00:14:19,400
And that's that's exact pattern we like.

198
00:14:19,400 --> 00:14:26,400
And that's what we encourage because yeah, thinking that granularly when you're building something is just kind of annoying.

199
00:14:26,400 --> 00:14:30,400
And then the next jazz has a concept of middleware.

200
00:14:30,400 --> 00:14:33,400
And those are deployed to the edge.

201
00:14:33,400 --> 00:14:35,400
Can you give us a quick rundown?

202
00:14:35,400 --> 00:14:39,400
We've talked about it on the show a few times, but I'm sure people are still not really familiar.

203
00:14:39,400 --> 00:14:40,400
What is the edge?

204
00:14:40,400 --> 00:14:42,400
Yeah, so this one is really tricky.

205
00:14:42,400 --> 00:14:48,400
So the reason this is tricky for us to implement is Vercel itself runs primarily on AWS.

206
00:14:48,400 --> 00:14:55,400
So when you run a function on XDS, sorry, on Vercel, it's keeping these two confused.

207
00:14:55,400 --> 00:14:59,400
On Vercel, it runs in AWS.

208
00:15:00,400 --> 00:15:03,400
But a lot of their edge stuff is powered by CloudFlare.

209
00:15:03,400 --> 00:15:09,400
So when the middleware runs at the edge, it's not running in AWS data center, it's running in a CloudFlare data center.

210
00:15:09,400 --> 00:15:13,400
And CloudFlare data centers, there's a lot more of them and they're closer to the end user.

211
00:15:13,400 --> 00:15:17,400
And they're less capable, but good enough to run things like middleware.

212
00:15:17,400 --> 00:15:22,400
So a big challenge for us is, okay, if you want to self-host all of next jazz, including the middleware,

213
00:15:22,400 --> 00:15:25,400
we have to deploy that middleware inside AWS.

214
00:15:25,400 --> 00:15:30,400
That means there's different constraints that we have to abide by that Vercel does not.

215
00:15:30,400 --> 00:15:33,400
Because they can pick whatever architecture they want.

216
00:15:33,400 --> 00:15:34,400
Yeah, yeah.

217
00:15:34,400 --> 00:15:37,400
It's actually kind of nice if you go to a vendor and they say, you know what?

218
00:15:37,400 --> 00:15:40,400
We'll just, we'll figure it out for you, we'll make it fast.

219
00:15:40,400 --> 00:15:49,400
So the limitations we're talking about with edge functions, and this is true for running in Dino in CloudFlare workers.

220
00:15:49,400 --> 00:15:54,400
And there's a couple other runtimes we've talked about is that it's not a no jazz environment.

221
00:15:54,400 --> 00:15:57,400
It's a JavaScript web environment.

222
00:15:57,400 --> 00:16:01,400
And you only have a certain set of APIs available to you.

223
00:16:01,400 --> 00:16:06,400
So I converted a tiny little site the other day and I was like, you know what?

224
00:16:06,400 --> 00:16:11,400
I'm going to run it on Netlify Edge, which is it runs in Dino.

225
00:16:11,400 --> 00:16:17,400
So you can't use any Node.js APIs unless Dino supports them and large packages and whatnot.

226
00:16:17,400 --> 00:16:20,400
So there's like a little bit of a limitation, but the upside is what?

227
00:16:20,400 --> 00:16:23,400
It's much faster and quicker to load.

228
00:16:23,400 --> 00:16:28,400
And they literally deploy them to hundreds of different server locations around the world.

229
00:16:28,400 --> 00:16:29,400
Yeah, exactly.

230
00:16:29,400 --> 00:16:34,400
So if you look at traditional Lambda functions on AWS, they're not opinionated about what language you use.

231
00:16:34,400 --> 00:16:37,400
You can use a variety of different languages that they support natively.

232
00:16:37,400 --> 00:16:40,400
You can bring your own custom runtime for languages you want.

233
00:16:40,400 --> 00:16:42,400
And that constrains their architecture.

234
00:16:42,400 --> 00:16:46,400
They have to build a functions platform for running any arbitrary code.

235
00:16:46,400 --> 00:16:51,400
Some of these Edge platforms like CloudFlare, they, again, it's all about narrowing scope.

236
00:16:51,400 --> 00:16:54,400
Whenever you narrow scope, you can really up the quality.

237
00:16:54,400 --> 00:16:59,400
They're saying you can not only just, you can train not only to JavaScript,

238
00:16:59,400 --> 00:17:02,400
but a very specific flavor of the runtime that we provide.

239
00:17:02,400 --> 00:17:04,400
It's good enough for most things.

240
00:17:04,400 --> 00:17:07,400
If you accept these constraints, we can do some really interesting things.

241
00:17:07,400 --> 00:17:09,400
And one of those things is basically zero cold start.

242
00:17:09,400 --> 00:17:14,400
They're billing on the CloudFlare Edge's billing is pretty incredible.

243
00:17:14,400 --> 00:17:16,400
Let me see if I can explain this.

244
00:17:16,400 --> 00:17:22,400
So if you only pay for compute time, that means if your function starts, compute some stuff,

245
00:17:22,400 --> 00:17:27,400
then makes a network request and it waits 500 milliseconds to network request.

246
00:17:27,400 --> 00:17:30,400
You're not actually being billed for that waiting time.

247
00:17:30,400 --> 00:17:34,400
You only build when the network request comes back and you're using the CPU again.

248
00:17:34,400 --> 00:17:42,400
And that creates a very simple concept, but it creates so many things and so many opportunities for things you can build that

249
00:17:42,400 --> 00:17:45,400
isn't exactly possible on a traditional functions platform.

250
00:17:45,400 --> 00:17:52,400
I remember seeing that because I remember looking at the 10 milliseconds or something like that on CloudFlare workers.

251
00:17:52,400 --> 00:17:55,400
I was like, that's not enough.

252
00:17:55,400 --> 00:17:59,400
And then who's possibly running code in 10 milliseconds?

253
00:17:59,400 --> 00:18:00,400
And that's it.

254
00:18:00,400 --> 00:18:01,400
But I've never hit that.

255
00:18:01,400 --> 00:18:02,400
I've never hit the issue.

256
00:18:02,400 --> 00:18:05,400
And somebody explained to me, no, it's not.

257
00:18:05,400 --> 00:18:12,400
If you're fetching a big thing that CloudFlare workers is really good at is proxying web pages.

258
00:18:12,400 --> 00:18:17,400
So if you're going to NBA.com and downloading all of the HTML and then waiting for it to come back,

259
00:18:17,400 --> 00:18:19,400
you're not paying for that time.

260
00:18:19,400 --> 00:18:20,400
And that's wild.

261
00:18:20,400 --> 00:18:22,400
Like, did they just not charge you for it?

262
00:18:22,400 --> 00:18:26,400
Or did they literally spin it down while you're waiting for that?

263
00:18:26,400 --> 00:18:27,400
Yeah.

264
00:18:27,400 --> 00:18:31,400
So technically they are not paying for like your function is off the CPU at that point.

265
00:18:31,400 --> 00:18:35,400
It's just waiting for the network hardware to say, hey, it's done downloading.

266
00:18:35,400 --> 00:18:37,400
I have a payload for you.

267
00:18:37,400 --> 00:18:39,400
So there still is like a memory cost for them.

268
00:18:39,400 --> 00:18:42,400
But the CPU cost is what's limited.

269
00:18:42,400 --> 00:18:48,400
So they can have other customers running on that CPU while you're waiting for your request to come back.

270
00:18:48,400 --> 00:18:53,400
And that's how they basically sell the same second multiple times multiple people.

271
00:18:53,400 --> 00:18:56,400
And it's a model that can work really well at scale.

272
00:18:56,400 --> 00:18:57,400
Wow.

273
00:18:58,400 --> 00:19:05,400
And that's another thing that people often understand is that like if you look at pricing for a lot of these things,

274
00:19:05,400 --> 00:19:07,400
they charge you by compute hour.

275
00:19:07,400 --> 00:19:10,400
Just regular people look at it and go like, how do I do that?

276
00:19:10,400 --> 00:19:13,400
Do you have any like tips on like, how would you calculate that type of thing?

277
00:19:13,400 --> 00:19:18,400
Or is it just a, you got to see pricing is a funny thing in a serverless world.

278
00:19:18,400 --> 00:19:20,400
It's pretty much in hindsight.

279
00:19:20,400 --> 00:19:24,400
And I would say, I think people try to come up with ways to figure out costs ahead of time.

280
00:19:24,400 --> 00:19:27,400
I think the reality is you don't know the cost ahead of time.

281
00:19:27,400 --> 00:19:30,400
It's more around shifting your mindset around what your costs are.

282
00:19:30,400 --> 00:19:33,400
I think we're used to paying for things in a monthly way.

283
00:19:33,400 --> 00:19:37,400
Now, like if you think about our personal lives, we pay monthly bills.

284
00:19:37,400 --> 00:19:41,400
But when it comes to cloud infrastructure and things involving your business,

285
00:19:41,400 --> 00:19:50,400
I think it's better to think about it as marginal cost where you just need to make sure that you are charging someone else more than what your marginal cost is.

286
00:19:51,400 --> 00:19:54,400
So to serve one request, it costs you a penny.

287
00:19:54,400 --> 00:19:56,400
Make sure you're charging 10 cents for that.

288
00:19:56,400 --> 00:20:00,400
That way it doesn't matter what your monthly bill is because if you scale up 100 X,

289
00:20:00,400 --> 00:20:02,400
your margin still makes sense, right?

290
00:20:02,400 --> 00:20:06,400
You're never going to go negative as long as you're thinking about like the unit economics there.

291
00:20:06,400 --> 00:20:08,400
But it is tricky.

292
00:20:08,400 --> 00:20:12,400
Like the pricing is on intuitive and it's not even compute hour now.

293
00:20:12,400 --> 00:20:13,400
It's like per millisecond.

294
00:20:13,400 --> 00:20:15,400
Like how many milliseconds are you going to use this month?

295
00:20:15,400 --> 00:20:18,400
It's not really something that you can really guess.

296
00:20:18,400 --> 00:20:21,400
You can look at it in hindsight and see what's what.

297
00:20:21,400 --> 00:20:25,400
Can it be like incredibly cheap to run stuff on this as well though?

298
00:20:25,400 --> 00:20:28,400
Yeah, I think there's a lot of confusion around pricing.

299
00:20:28,400 --> 00:20:34,400
I think people, I've heard people instinctively say serverless stuff is really expensive.

300
00:20:34,400 --> 00:20:38,400
I've also heard people instinctively say that it's not expensive.

301
00:20:38,400 --> 00:20:40,400
In practice, it's insanely cheap.

302
00:20:40,400 --> 00:20:43,400
And the numbers and the way you compute the numbers are a little bit counterintuitive,

303
00:20:43,400 --> 00:20:46,400
which is why people might perceive them as being expensive.

304
00:20:46,400 --> 00:20:49,400
But it is like unbelievably cheap.

305
00:20:49,400 --> 00:20:53,400
Like I don't think I've had a bill more than like $5 or something.

306
00:20:53,400 --> 00:20:57,400
And I run some stuff like serious traffic.

307
00:20:57,400 --> 00:21:03,400
And I think the culture at least with AWS is they have never raised prices ever.

308
00:21:03,400 --> 00:21:07,400
There's some services that are now 99% cheaper than they were when they launched.

309
00:21:07,400 --> 00:21:12,400
They know the moment that they leave room that someone else is going to come in and offer a cheaper service.

310
00:21:12,400 --> 00:21:15,400
So you'll just see prices go down and down and down.

311
00:21:15,400 --> 00:21:21,400
As one of my favorite examples of this is Lambda, let me see if I can remember the exact numbers.

312
00:21:21,400 --> 00:21:24,400
So they used to charge per 100 milliseconds.

313
00:21:24,400 --> 00:21:30,400
So if you had a request that took 20 milliseconds, you were being charged for 100 milliseconds.

314
00:21:30,400 --> 00:21:35,400
Then one day they came out and they said, okay, we're now going to charge you per millisecond.

315
00:21:35,400 --> 00:21:40,400
That means your costs are now 80% cheaper overnight without you doing anything.

316
00:21:40,400 --> 00:21:42,400
And there's a million examples of this.

317
00:21:42,400 --> 00:21:47,400
And I think people kind of worry about with all these very cloud native services.

318
00:21:47,400 --> 00:21:48,400
Am I going to get trapped?

319
00:21:48,400 --> 00:21:51,400
And they're going to jack the price up and I'm going to be screwed.

320
00:21:51,400 --> 00:21:57,400
Historically, at least with this modern set of companies, they understand the mistakes of the previous generation of companies.

321
00:21:57,400 --> 00:21:59,400
I try to do that.

322
00:21:59,400 --> 00:22:02,400
And I know that they got to make sure prices keep going down.

323
00:22:02,400 --> 00:22:09,400
I'll give you another example of I host my course platform on render as a long-running node app.

324
00:22:09,400 --> 00:22:19,400
I've been really looking at moving it over to serverless lately because specifically because I have pull request previews on my pull request.

325
00:22:19,400 --> 00:22:22,400
And I had a pull request sitting there for three or four months.

326
00:22:22,400 --> 00:22:24,400
I wasn't ready to deal with it.

327
00:22:24,400 --> 00:22:27,400
And then I had three or four running for a couple of weeks.

328
00:22:27,400 --> 00:22:35,400
And then I realized like every single pull request is another VM that is spun up and run until I merge the pull request.

329
00:22:35,400 --> 00:22:46,400
And if your regular VM costs $10 a month and then you have six more pull requests running at $10 each a month, that gets out of hand really quickly.

330
00:22:46,400 --> 00:22:49,400
And the obvious answer is merge and quick.

331
00:22:49,400 --> 00:22:50,400
It's cheaper to do that.

332
00:22:50,400 --> 00:22:58,400
But I thought like, man, if this was serverless functions, it literally would not run until I click the URL and that thing will spin up again.

333
00:22:58,400 --> 00:23:01,400
Yeah, that's kind of why some of these costs are counterintuitive.

334
00:23:01,400 --> 00:23:05,400
It's easy to think about just a very narrow version of your production environment.

335
00:23:05,400 --> 00:23:08,400
Like think about like one container running production.

336
00:23:08,400 --> 00:23:11,400
But that container has to be at least reasonably highly available.

337
00:23:11,400 --> 00:23:16,400
Then you have like your dev environments and your pull request environments and all these add up.

338
00:23:16,400 --> 00:23:18,400
And it's not just your compute part of it.

339
00:23:18,400 --> 00:23:21,400
It's can you pay for your database in a serverless way?

340
00:23:21,400 --> 00:23:26,400
If you can, then you can have a separate database for each pull request environment and it's costing you nothing.

341
00:23:26,400 --> 00:23:33,400
So a lot of we see a lot of people coming to serverless specifically for the developer environments and the pull request environments.

342
00:23:33,400 --> 00:23:36,400
What about images and assets?

343
00:23:36,400 --> 00:23:39,400
So I know Next.js has really nice image component.

344
00:23:39,400 --> 00:23:41,400
I'll let you resize on the fly.

345
00:23:41,400 --> 00:23:45,400
Is that type of thing something you can also do in the serverless world?

346
00:23:45,400 --> 00:23:49,400
Yeah, so their standard build output outputs a function that can do that.

347
00:23:49,400 --> 00:23:52,400
And we just deploy that as another serverless function.

348
00:23:53,400 --> 00:23:58,400
And it actually that part actually works pretty nicely out of the box.

349
00:23:58,400 --> 00:24:02,400
I think the thing with that is there's not anything specific to your application.

350
00:24:02,400 --> 00:24:07,400
Like that image resizing and all those tools are like a generic solution, right?

351
00:24:07,400 --> 00:24:08,400
You just pass in.

352
00:24:08,400 --> 00:24:11,400
It's just going to pass an image that you need and handle the resizing.

353
00:24:11,400 --> 00:24:14,400
So that is something that we support in the self-hosted version.

354
00:24:14,400 --> 00:24:18,400
And yeah, it's like sitting behind a CDN and all that.

355
00:24:18,400 --> 00:24:19,400
So it's optimized.

356
00:24:19,400 --> 00:24:20,400
Awesome.

357
00:24:20,400 --> 00:24:25,400
And then the CDN is so cloud flare or sorry, not cloud flare.

358
00:24:25,400 --> 00:24:29,400
Yeah, cloud front and S3, right?

359
00:24:29,400 --> 00:24:30,400
Is it using both of those?

360
00:24:30,400 --> 00:24:31,400
Yeah.

361
00:24:31,400 --> 00:24:35,400
So when we build your Next.js app, there's a few things that it spits out.

362
00:24:35,400 --> 00:24:37,400
There's a bunch of static files that don't change.

363
00:24:37,400 --> 00:24:43,400
And those get uploaded to S3 that gets put behind a CDN, which is cloud front.

364
00:24:43,400 --> 00:24:46,400
Your functions actually get put behind the CDN as well.

365
00:24:47,400 --> 00:24:50,400
And there's also your functions for your main application.

366
00:24:50,400 --> 00:24:52,400
We also deploy some edge functions.

367
00:24:52,400 --> 00:24:54,400
So AWS does support edge functions.

368
00:24:54,400 --> 00:24:58,400
And those actually live in the same environment as the CDN.

369
00:24:58,400 --> 00:25:02,400
We deploy edge functions there for the Next.js middleware, middleware stuff.

370
00:25:02,400 --> 00:25:08,400
So what is, so I'm actually looking at, I primarily use Svelte and Svelte kit myself.

371
00:25:08,400 --> 00:25:12,400
And they have this adapter situation where you can have an output adapter.

372
00:25:13,400 --> 00:25:18,400
I found basically the Svelte kit adapter, AWS CDK.

373
00:25:18,400 --> 00:25:22,400
And they have very similar diagrams to kind of what you have going on, right?

374
00:25:22,400 --> 00:25:26,400
You have the S3 buckets, you have cloud fronts for the CDN and the static assets

375
00:25:26,400 --> 00:25:28,400
for an S3 bucket.

376
00:25:28,400 --> 00:25:33,400
Is the CDK a layer on top of something that Amazon is doing?

377
00:25:33,400 --> 00:25:39,400
Or is that just a name for how you develop cloud applications locally?

378
00:25:39,400 --> 00:25:44,400
Yeah, so when you start looking at AWS, you realize it's just like crazy amount of layers.

379
00:25:44,400 --> 00:25:47,400
So let me see if Anttraces all the way down.

380
00:25:47,400 --> 00:25:53,400
So AWS has an infrastructure as code tool called CloudFormation.

381
00:25:53,400 --> 00:25:58,400
All this means is instead of going into AWS UI, clicking a bunch of things to configure something,

382
00:25:58,400 --> 00:26:01,400
you can do this all in this YAML specification.

383
00:26:01,400 --> 00:26:02,400
It's terrible.

384
00:26:02,400 --> 00:26:03,400
Nobody should be using it.

385
00:26:03,400 --> 00:26:05,400
Everyone hates using it.

386
00:26:05,400 --> 00:26:10,400
So they built a layer that compiles to CloudFormation called CDK.

387
00:26:10,400 --> 00:26:15,400
So instead of writing YAML, you can write types.

388
00:26:15,400 --> 00:26:17,400
I have a lot of issues with CDK.

389
00:26:17,400 --> 00:26:22,400
They optimize it so you can write it in a variety of different languages, like TypeScript, Python,

390
00:26:22,400 --> 00:26:28,400
I think Java, Go, a few others and all compiles down into this CloudFormation YAML.

391
00:26:28,400 --> 00:26:32,400
99% of people, I think they're just using it in TypeScript.

392
00:26:32,400 --> 00:26:34,400
So I just wish they just optimized for TypeScript.

393
00:26:34,400 --> 00:26:37,400
I'm trying to make something multi-language.

394
00:26:37,400 --> 00:26:42,400
And so today, a modern application on AWS, I think CDK is a pretty good option.

395
00:26:42,400 --> 00:26:47,400
A lot of people are still using CloudFormation directly just because they have the experience with it.

396
00:26:47,400 --> 00:26:51,400
And SST, the thing that we build is actually built on top of CDK.

397
00:26:51,400 --> 00:26:54,400
So we have a lot of experience with CDK and some of the internals there.

398
00:26:54,400 --> 00:27:00,400
So if somebody opts to use CDK, are they opting in to paying for that as a bit more of a service,

399
00:27:00,400 --> 00:27:03,400
or are they still paying just for the underlying services?

400
00:27:03,400 --> 00:27:07,400
Yeah, so there's no charges associated with CloudFormation.

401
00:27:07,400 --> 00:27:09,400
So it's just a way for you to deploy stuff.

402
00:27:09,400 --> 00:27:15,400
Yeah, so we had a while back, we had Brian LaRue from Begin,

403
00:27:15,400 --> 00:27:20,400
which they seem to be switching gears a little bit, which is kind of interesting.

404
00:27:20,400 --> 00:27:24,400
So he runs a project called Architect, which is Arc.Code.

405
00:27:24,400 --> 00:27:29,400
And that, basically, it's your infrastructure as code,

406
00:27:29,400 --> 00:27:32,400
and that will compile to a CloudFormation.

407
00:27:32,400 --> 00:27:34,400
It's funny. There's lots of people building it on top.

408
00:27:34,400 --> 00:27:37,400
So we talk about that.

409
00:27:37,400 --> 00:27:40,400
I'll talk about one more, and then let's get into what SST is.

410
00:27:40,400 --> 00:27:44,400
So there's another one that people keep recommending to me, and that's Terraform.

411
00:27:44,400 --> 00:27:47,400
Are you familiar with that? Can you explain what that is?

412
00:27:47,400 --> 00:27:52,400
Yeah, so Terraform is another infrastructure as code tool that is not tied to any specific Cloud provider.

413
00:27:52,400 --> 00:27:54,400
I actually am a huge fan of the Terraform ecosystem.

414
00:27:54,400 --> 00:27:57,400
I used to build everything in Terraform, like,

415
00:27:57,400 --> 00:28:02,400
made for, like, four or five years before I moved to working on SST.

416
00:28:02,400 --> 00:28:08,400
Their interface is, it's not YAML, but it is a similar configuration language.

417
00:28:08,400 --> 00:28:13,400
I would say it's a lot better than YAML, but you can basically configure anything.

418
00:28:13,400 --> 00:28:17,400
You can configure stuff in AWS, you can configure stuff in CloudFlare.

419
00:28:17,400 --> 00:28:19,400
You can, like, make it turn on a light in your house.

420
00:28:19,400 --> 00:28:22,400
Like, you can kind of use it for literally anything,

421
00:28:22,400 --> 00:28:27,400
and it's basically a way to describe the state of any system

422
00:28:27,400 --> 00:28:32,400
and have it, you know, retain that state and make changes to it over time.

423
00:28:32,400 --> 00:28:38,400
It's a great, like, neutral open source tool that's not tied to any one specific vendor.

424
00:28:38,400 --> 00:28:45,400
And we're actually looking not anytime soon, but long-term we would like to be more built on top of Terraform

425
00:28:45,400 --> 00:28:50,400
than built on top of CDK, just so we have access to some of the larger ecosystem.

426
00:28:50,400 --> 00:28:51,400
Yeah.

427
00:28:51,400 --> 00:28:57,400
All right, so you've talked about SST quite a bit, but, like, let's give us a 30-minute or nothing,

428
00:28:57,400 --> 00:29:02,400
a 30-second, one-minute rundown of what it is and why are you building this?

429
00:29:02,400 --> 00:29:09,400
Yeah, so that premise here is, like I said earlier, AWS is actually a great choice for most companies

430
00:29:09,400 --> 00:29:12,400
building products that they're trying to sell to other people.

431
00:29:12,400 --> 00:29:16,400
It's just extremely hard to understand anything going on in AWS.

432
00:29:16,400 --> 00:29:19,400
You're not really going to understand it through the console, the documentation.

433
00:29:19,400 --> 00:29:23,400
There's a ton of stuff to learn before you can even know the right way to do something.

434
00:29:23,400 --> 00:29:31,400
So the idea here is let's build a framework that is our idea of the best way to build an application on AWS.

435
00:29:31,400 --> 00:29:33,400
So we don't cover all of AWS.

436
00:29:33,400 --> 00:29:38,400
I would say we cover maybe, like, 2% of AWS, which is probably the 2% that most people need.

437
00:29:38,400 --> 00:29:45,400
We focus just on the serverless services, and we provide high-level contracts, things like APIs,

438
00:29:45,400 --> 00:29:51,400
databases, stuff like cron jobs, queues, long-running jobs, scheduled events, things like that

439
00:29:51,400 --> 00:29:56,400
that are high-level pieces that you need for most applications that you can just spin up

440
00:29:56,400 --> 00:30:00,400
and configure and then access in your application code.

441
00:30:00,400 --> 00:30:02,400
Our scope is pretty broad.

442
00:30:02,400 --> 00:30:05,400
We'll cover stuff that is very infrastructure-related like that.

443
00:30:05,400 --> 00:30:09,400
We'll also cover rough edges that show up in your application.

444
00:30:09,400 --> 00:30:12,400
Like I said, we're doing the open-next stuff, so we help you deploy your front-end, say,

445
00:30:12,400 --> 00:30:13,400
AWS as well.

446
00:30:13,400 --> 00:30:20,400
We just want to make it really viable for you to start a project on day 1 AWS without doing all this work

447
00:30:20,400 --> 00:30:23,400
of understanding and research.

448
00:30:23,400 --> 00:30:27,400
But, you know, as your company grows, as your product grows, day 100, day 1000,

449
00:30:27,400 --> 00:30:32,400
you're still built on AWS, so you're not going to really need to eject out into something else.

450
00:30:32,400 --> 00:30:37,400
So the idea is, you know, keep it simple in the beginning, but it's going to be able to stick with you

451
00:30:37,400 --> 00:30:38,400
for the long run.

452
00:30:39,400 --> 00:30:43,400
And if you're out there and you hear 2% of AWS, you think that's not very much,

453
00:30:43,400 --> 00:30:46,400
just go ahead to services in the top left of AWS,

454
00:30:46,400 --> 00:30:50,400
click all services and just start scrolling, and then by tomorrow you'll hit the bottom of it.

455
00:30:50,400 --> 00:30:51,400
Yeah, exactly.

456
00:30:51,400 --> 00:30:53,400
They have a lot of stuff, and you eventually will need some of it.

457
00:30:53,400 --> 00:30:57,400
Is this something that you would pick up before you start an application,

458
00:30:57,400 --> 00:31:01,400
or is I know you have adapters for frameworks, but then I'm looking at the docs,

459
00:31:01,400 --> 00:31:06,400
and there's also, like, if I want to just have a raw request coming in from a URL,

460
00:31:06,400 --> 00:31:08,400
does it have a router?

461
00:31:08,400 --> 00:31:10,400
Like, where does this fit in?

462
00:31:10,400 --> 00:31:14,400
Do I build on top of this, or do I take my existing app and put it into it?

463
00:31:14,400 --> 00:31:16,400
Yeah, so we have two different options.

464
00:31:16,400 --> 00:31:19,400
For most people, we would recommend, if you're starting fresh,

465
00:31:19,400 --> 00:31:24,400
you start with a fresh SSC project, it sets you up for something that will work for a pretty long time.

466
00:31:24,400 --> 00:31:30,400
And you can configure that with, I just want an API, or I have an API plus a GraphQL thing,

467
00:31:30,400 --> 00:31:32,400
or I have, you know, an XJS app.

468
00:31:32,400 --> 00:31:34,400
You can kind of configure however you want.

469
00:31:34,400 --> 00:31:37,400
We kind of think of that as an SST app that you're building.

470
00:31:37,400 --> 00:31:42,400
We also have something called drop-in mode, which we're releasing kind of framework by framework.

471
00:31:42,400 --> 00:31:47,400
We did a launch for Astro a few weeks ago, and we're doing one for next JS next week.

472
00:31:47,400 --> 00:31:49,400
Basically, you have an existing Astro app.

473
00:31:49,400 --> 00:31:51,400
You have an existing next JS app, whatever it is.

474
00:31:51,400 --> 00:31:54,400
You just want to, like, drop this in and get this deployment at AWS.

475
00:31:54,400 --> 00:31:58,400
You're not really trying to build the fully fledged SSC application.

476
00:31:58,400 --> 00:32:01,400
That basically requires you to just drop in a single file, and, you know,

477
00:32:01,400 --> 00:32:04,400
you can deploy everything you have to AWS.

478
00:32:04,400 --> 00:32:06,400
Oh, cool.

479
00:32:06,400 --> 00:32:10,400
And what about, like, a local dev experience?

480
00:32:10,400 --> 00:32:15,400
That's one thing that always makes me nuts, is that, like, okay,

481
00:32:15,400 --> 00:32:19,400
I can run this thing locally, but then I have a whole other set of whatever

482
00:32:19,400 --> 00:32:23,400
and trying to replicate the local environment.

483
00:32:23,400 --> 00:32:25,400
And, yeah, such a pain.

484
00:32:25,400 --> 00:32:27,400
Like, do you solve that pain?

485
00:32:27,400 --> 00:32:29,400
So that's actually where SSC started.

486
00:32:29,400 --> 00:32:31,400
And that's kind of how I even found the project.

487
00:32:31,400 --> 00:32:33,400
I was first going to serverless, and, like you said,

488
00:32:33,400 --> 00:32:36,400
the first question I had was, like, how the hell do I do local development

489
00:32:36,400 --> 00:32:38,400
when everything is in the cloud?

490
00:32:38,400 --> 00:32:41,400
And I was building, like, my own, like, crappy solution to this,

491
00:32:41,400 --> 00:32:43,400
and I found SSC would have just come out that time,

492
00:32:43,400 --> 00:32:45,400
and they launched with a really, kind of like a single feature.

493
00:32:45,400 --> 00:32:47,400
It was a live lambda debugging.

494
00:32:47,400 --> 00:32:52,400
And the idea here is the recommended setup we have for building, like,

495
00:32:52,400 --> 00:32:57,400
these AWS native systems is most of the stuff you do want remotely,

496
00:32:57,400 --> 00:32:59,400
like, your database, you want to remotely is great,

497
00:32:59,400 --> 00:33:01,400
like, your queues running remotely is great.

498
00:33:01,400 --> 00:33:06,400
The thing that sucks is when you make a change in your function code,

499
00:33:06,400 --> 00:33:09,400
you don't want to wait for it to upload AWS,

500
00:33:09,400 --> 00:33:11,400
which can take, like, five seconds to then, like,

501
00:33:11,400 --> 00:33:13,400
have the whole feedback loop.

502
00:33:13,400 --> 00:33:17,400
So SST originally has this brilliant idea of,

503
00:33:17,400 --> 00:33:20,400
let's deploy 99% of your application for real,

504
00:33:20,400 --> 00:33:22,400
because you're not changing it that frequently.

505
00:33:22,400 --> 00:33:25,400
But for functions, let's deploy a fake function,

506
00:33:25,400 --> 00:33:27,400
and when a request hits that function,

507
00:33:27,400 --> 00:33:29,400
we're going to forward it to your local machine, execute it locally,

508
00:33:29,400 --> 00:33:31,400
and then send the response back.

509
00:33:31,400 --> 00:33:33,400
So what that means is when you make changes,

510
00:33:33,400 --> 00:33:35,400
instead of waiting five seconds for the update,

511
00:33:35,400 --> 00:33:37,400
it's, like, how fast ES build can run.

512
00:33:37,400 --> 00:33:40,400
So, like, a 50 millisecond response time.

513
00:33:40,400 --> 00:33:42,400
So we really originally started with figuring out,

514
00:33:42,400 --> 00:33:44,400
it made the local development experience really good.

515
00:33:44,400 --> 00:33:46,400
And since then, we've added a bunch of things around this

516
00:33:46,400 --> 00:33:48,400
to solve other rough edges.

517
00:33:48,400 --> 00:33:50,400
But today, when you do SST dev,

518
00:33:50,400 --> 00:33:53,400
which basically brings up your SST app in local mode,

519
00:33:53,400 --> 00:33:55,400
it feels like a normal, locally running app,

520
00:33:55,400 --> 00:33:57,400
with all the benefits of most of it running in cloud.

521
00:33:57,400 --> 00:33:59,400
And there's not much difference when you deploy to production.

522
00:33:59,400 --> 00:34:01,400
It's pretty much the exact same environment

523
00:34:01,400 --> 00:34:03,400
as what you had in the dev mode.

524
00:34:03,400 --> 00:34:05,400
Oh, that's cool.

525
00:34:05,400 --> 00:34:07,400
And do you do any...

526
00:34:07,400 --> 00:34:09,400
I don't know if you said this or not.

527
00:34:09,400 --> 00:34:11,400
Does SST do edge functions as well?

528
00:34:11,400 --> 00:34:14,400
Yeah, so we don't have native contract.

529
00:34:14,400 --> 00:34:18,400
So SST offers, like, a set of, like, native SST contracts.

530
00:34:18,400 --> 00:34:20,400
We don't have one yet for edge functions.

531
00:34:20,400 --> 00:34:24,400
But you can drop down into CDK and deploy an edge function yourself.

532
00:34:24,400 --> 00:34:29,400
It's just a little more complicated and not as nice as the other SST contracts.

533
00:34:29,400 --> 00:34:31,400
But we probably will support this eventually.

534
00:34:31,400 --> 00:34:33,400
Yeah, that's one thing I've always been wondering about,

535
00:34:33,400 --> 00:34:37,400
like, is, like, what does the local development environment look like

536
00:34:37,400 --> 00:34:39,400
for developing edge functions?

537
00:34:39,400 --> 00:34:42,400
Because you need to constrain the thing.

538
00:34:42,400 --> 00:34:46,400
If you run it in Node, then someone's going to accidentally import a Node app

539
00:34:46,400 --> 00:34:48,400
and then it doesn't work and then you deploy it.

540
00:34:48,400 --> 00:34:51,400
So I know CloudFlare has MiniFlare, which is...

541
00:34:51,400 --> 00:34:54,400
I think it's a Node environment that is, like,

542
00:34:54,400 --> 00:34:56,400
they do something to pair it down.

543
00:34:56,400 --> 00:34:58,400
You could obviously run it in Dino.

544
00:34:58,400 --> 00:35:01,400
Do you have any thoughts there or is not something you've gone into?

545
00:35:01,400 --> 00:35:05,400
No, so the one thing I should mention is AWS's edge functions

546
00:35:05,400 --> 00:35:07,400
are actually just normal Node.js functions.

547
00:35:07,400 --> 00:35:09,400
So they are the only provider that lets you run Node at the edge.

548
00:35:09,400 --> 00:35:10,400
Oh, okay.

549
00:35:10,400 --> 00:35:11,400
So they're actually...

550
00:35:11,400 --> 00:35:12,400
We don't really have that problem.

551
00:35:12,400 --> 00:35:15,400
We're just going to, you know, run Node locally and it'll be fine.

552
00:35:16,400 --> 00:35:19,400
Yeah, but for the other services like CloudFlare,

553
00:35:19,400 --> 00:35:23,400
they basically just let you run the exact runtime they're running at edge locally

554
00:35:23,400 --> 00:35:25,400
and that'll kind of constrain it.

555
00:35:25,400 --> 00:35:28,400
So you have a replicated environment locally.

556
00:35:28,400 --> 00:35:32,400
And probably not an issue for all that much longer,

557
00:35:32,400 --> 00:35:36,400
given last week, CloudFlare announced that it now supports

558
00:35:36,400 --> 00:35:38,400
a whole bunch more of the Node APIs.

559
00:35:38,400 --> 00:35:42,400
Dino now has parity with Node and Oban.

560
00:35:43,400 --> 00:35:46,400
So at a certain point, we're just going to have the Node API

561
00:35:46,400 --> 00:35:48,400
that will literally run anywhere.

562
00:35:48,400 --> 00:35:51,400
And maybe at that point, we run everything in an edge function?

563
00:35:51,400 --> 00:35:52,400
Yeah, I think edge functions...

564
00:35:52,400 --> 00:35:53,400
I'm just talking about my butt here.

565
00:35:53,400 --> 00:35:54,400
I don't really know.

566
00:35:54,400 --> 00:35:57,400
Well, so the reason we haven't built Edge...

567
00:35:57,400 --> 00:36:00,400
So we're very user driven, so we're only really going to build stuff

568
00:36:00,400 --> 00:36:02,400
when people start asking for it.

569
00:36:02,400 --> 00:36:04,400
And no one's really asked for Edge functions.

570
00:36:04,400 --> 00:36:08,400
And the reason is they're kind of an awkward fit in your infrastructure.

571
00:36:08,400 --> 00:36:11,400
The way I like to describe it is, imagine you have a string

572
00:36:11,400 --> 00:36:14,400
and there's different beads that are on the string.

573
00:36:14,400 --> 00:36:15,400
One bead is a user.

574
00:36:15,400 --> 00:36:17,400
The other bead is, let's say, your API

575
00:36:17,400 --> 00:36:20,400
and the other bead is your database.

576
00:36:20,400 --> 00:36:24,400
If you start to move your API, so your functions closer to the user,

577
00:36:24,400 --> 00:36:26,400
they're now further away from your database.

578
00:36:26,400 --> 00:36:29,400
So now, round trips to your database are more expensive.

579
00:36:29,400 --> 00:36:31,400
So you can move the function closer to the user.

580
00:36:31,400 --> 00:36:35,400
But if you need to make two database calls to process that request,

581
00:36:35,400 --> 00:36:37,400
it might actually be slower overall.

582
00:36:37,400 --> 00:36:39,400
Then there's a question of moving...

583
00:36:39,400 --> 00:36:42,400
Okay, can we just move the database closer to the user as well?

584
00:36:42,400 --> 00:36:45,400
But then now that database is further away from the other database nodes.

585
00:36:45,400 --> 00:36:50,400
So you're always going to be constrained by distributed systems problems.

586
00:36:50,400 --> 00:36:52,400
I think there's a lot of hype around Edge right now,

587
00:36:52,400 --> 00:36:56,400
but I think outside of a front-end rendering stuff,

588
00:36:56,400 --> 00:37:00,400
there's not really much adoption and serving back-end requests.

589
00:37:00,400 --> 00:37:01,400
Interesting.

590
00:37:01,400 --> 00:37:02,400
That's really good to know.

591
00:37:02,400 --> 00:37:06,400
Can you talk a little bit about databases as well in terms of SSD?

592
00:37:06,400 --> 00:37:07,400
What should we be using?

593
00:37:07,400 --> 00:37:10,400
Yeah, so we support two databases out of the box.

594
00:37:10,400 --> 00:37:13,400
One is DynamoDB, and the other is RDS.

595
00:37:13,400 --> 00:37:16,400
AWS has a relational...

596
00:37:16,400 --> 00:37:20,400
It's a serverless relational database service.

597
00:37:20,400 --> 00:37:23,400
So my SQL or Postgres, you can deploy it in this.

598
00:37:23,400 --> 00:37:25,400
It's not really serverless, like fake serverless.

599
00:37:25,400 --> 00:37:29,400
They'll kind of turn it on and off and auto-scale it for you.

600
00:37:29,400 --> 00:37:30,400
We support it.

601
00:37:30,400 --> 00:37:34,400
We don't recommend anyone to actually use it unless they're forced to use only AWS

602
00:37:34,400 --> 00:37:38,400
services because things like planet scale and like neon,

603
00:37:38,400 --> 00:37:43,400
much better options for running relational databases in a serverless way.

604
00:37:43,400 --> 00:37:47,400
And on a DynamoDB side, DynamoDB is an excellent, excellent database,

605
00:37:47,400 --> 00:37:51,400
and it works incredibly well with serverless environments

606
00:37:51,400 --> 00:37:53,400
and serverless architectures.

607
00:37:53,400 --> 00:37:55,400
It is a challenge to learn.

608
00:37:55,400 --> 00:37:58,400
There's a pattern in it called single-table design.

609
00:37:58,400 --> 00:38:01,400
If you're coming from mostly relational databases,

610
00:38:01,400 --> 00:38:04,400
it's going to seem really, really weird for you.

611
00:38:04,400 --> 00:38:07,400
It is really great, and I think it's worth the time learning,

612
00:38:07,400 --> 00:38:10,400
because if you learn it, you can build systems that basically scale infinitely,

613
00:38:10,400 --> 00:38:13,400
and you never have to worry about database scaling ever again.

614
00:38:13,400 --> 00:38:16,400
But if you don't really have that burning need,

615
00:38:16,400 --> 00:38:21,400
then I would say go to some of these new relational database services like planet scale.

616
00:38:21,400 --> 00:38:25,400
So people coming from non-relational databases like a Mongo context,

617
00:38:25,400 --> 00:38:29,400
would they be more likely to grasp some of the context,

618
00:38:29,400 --> 00:38:32,400
or is it his own thing entirely?

619
00:38:32,400 --> 00:38:34,400
I tried it. It's freaking awful.

620
00:38:34,400 --> 00:38:36,400
I could not pick it up, yeah.

621
00:38:36,400 --> 00:38:40,400
So hypothetically, a Mongo developer should be able to pick it up,

622
00:38:40,400 --> 00:38:43,400
but I think a lot of just given Mongo's history,

623
00:38:43,400 --> 00:38:46,400
a lot of people using Mongo aren't using it the right way.

624
00:38:46,400 --> 00:38:50,400
But yeah, so I think if you're coming from something like Cassandra

625
00:38:50,400 --> 00:38:55,400
or a lot of the other maybe less popular, no-SQL databases,

626
00:38:55,400 --> 00:38:58,400
it's very familiar, and you kind of understand the constraints.

627
00:38:58,400 --> 00:39:02,400
There's a little bit of a misconception with no-SQL in that you can't use it

628
00:39:02,400 --> 00:39:05,400
for relational database, relational data.

629
00:39:05,400 --> 00:39:09,400
All data is relational, like I've never seen a non-relational dataset.

630
00:39:09,400 --> 00:39:11,400
You can model all of it in Dynamo.

631
00:39:11,400 --> 00:39:13,400
It's just very different and very weird.

632
00:39:13,400 --> 00:39:18,400
I use it for most of my projects, but we definitely acknowledge there's a big learning curve.

633
00:39:18,400 --> 00:39:19,400
That's good.

634
00:39:19,400 --> 00:39:26,400
So we have an entire show on serverless databases where we talked about

635
00:39:26,400 --> 00:39:28,400
relational versus non-relational.

636
00:39:28,400 --> 00:39:32,400
And I ended up saying I really like the planet scale approach,

637
00:39:32,400 --> 00:39:37,400
because you can just use whatever adapter, if you know MySQL,

638
00:39:37,400 --> 00:39:40,400
or you can use whatever library that you're used to using

639
00:39:40,400 --> 00:39:45,400
and whatever, then local development is great.

640
00:39:45,400 --> 00:39:49,400
And then you can deploy the thing to a service that does make it serverless.

641
00:39:49,400 --> 00:39:52,400
And I thought that was a really neat approach.

642
00:39:52,400 --> 00:39:53,400
Yeah, planet scale is great.

643
00:39:53,400 --> 00:39:57,400
And it's kind of, we're trying to push most people down that route.

644
00:39:57,400 --> 00:40:00,400
We just have, because we're in the AWS world, we have a lot of like

645
00:40:00,400 --> 00:40:04,400
enterprise users that are like, we can't deploy a single thing outside AWS.

646
00:40:04,400 --> 00:40:10,400
So they're stuck on RDS, which I really want AWS to catch up to planet scale there.

647
00:40:10,400 --> 00:40:12,400
The gap is like ridiculous.

648
00:40:12,400 --> 00:40:13,400
It's not even close.

649
00:40:13,400 --> 00:40:15,400
What about built pipelines?

650
00:40:15,400 --> 00:40:20,400
That's another thing that I go to Amazon and they tell you,

651
00:40:20,400 --> 00:40:25,400
literally zip up your serverless function and press the upload button

652
00:40:25,400 --> 00:40:28,400
and you can upload a zip file of a thing.

653
00:40:28,400 --> 00:40:30,400
And I'm like, seriously, where's the like,

654
00:40:30,400 --> 00:40:33,400
get deploy automatic build type of thing?

655
00:40:33,400 --> 00:40:35,400
What's your solution to that?

656
00:40:35,400 --> 00:40:36,400
Yeah, I'm going to give you some advice.

657
00:40:36,400 --> 00:40:39,400
Just never log into AWS console ever again.

658
00:40:39,400 --> 00:40:42,400
You never need to go into it.

659
00:40:42,400 --> 00:40:44,400
And all the information in there is wrong.

660
00:40:44,400 --> 00:40:47,400
So just don't go in there.

661
00:40:48,400 --> 00:40:51,400
So with SST, because it's an infrastructure as code tool,

662
00:40:51,400 --> 00:40:56,400
as a part of it is, we know everything that your application needs to deploy.

663
00:40:56,400 --> 00:40:58,400
And we build everything for you.

664
00:40:58,400 --> 00:41:01,400
So we like build all your functions in parallel, like do that all efficiently.

665
00:41:01,400 --> 00:41:07,400
And we output that into a single artifact that we then deploy also for you.

666
00:41:07,400 --> 00:41:10,400
You can split that up if you want to like build it first and then like deploy it later.

667
00:41:10,400 --> 00:41:13,400
But typically people just build and deploy all at once.

668
00:41:14,400 --> 00:41:19,400
So our CLI, you know, SST deploy will deploy everything for you.

669
00:41:19,400 --> 00:41:23,400
And in terms of CI, that's actually where we make money.

670
00:41:23,400 --> 00:41:25,400
So we have a product called seed.

671
00:41:25,400 --> 00:41:30,400
It is a build tool that is optimized for SST and other serverless projects.

672
00:41:30,400 --> 00:41:34,400
It just does a bunch of things that a generic build tool would never bother doing.

673
00:41:34,400 --> 00:41:38,400
Just because we know the exact structure of your application.

674
00:41:38,400 --> 00:41:41,400
So a lot of our users are using that to automate their builds

675
00:41:41,400 --> 00:41:45,400
and do like PR environments and environments for different branches, things like that.

676
00:41:45,400 --> 00:41:48,400
And we'll like do stuff like monitoring all this once it's deployed.

677
00:41:48,400 --> 00:41:53,400
So because we know all the functions are deployed, we can add hooks to watch all the logs.

678
00:41:53,400 --> 00:41:56,400
And if we see something that looks like an error, we can pull out the error, structure it,

679
00:41:56,400 --> 00:41:58,400
kind of like how sentry would do.

680
00:41:58,400 --> 00:41:59,400
So things like that.

681
00:41:59,400 --> 00:42:01,400
That's how we monetize our open source stuff.

682
00:42:01,400 --> 00:42:02,400
Thanks.

683
00:42:02,400 --> 00:42:03,400
Oh, that's cool.

684
00:42:03,400 --> 00:42:09,400
And would it also tell you things like how long your functions are taking to run?

685
00:42:10,400 --> 00:42:11,400
And why not?

686
00:42:11,400 --> 00:42:14,400
Or is that more you have to get into the AWS console and look at the graphs there.

687
00:42:14,400 --> 00:42:17,400
Our goal is to eventually make it so you never actually need to go there.

688
00:42:17,400 --> 00:42:20,400
We do have some basic observability tools right now.

689
00:42:20,400 --> 00:42:24,400
We haven't invested a ton in it, but eventually we do want to understand what types of things

690
00:42:24,400 --> 00:42:28,400
do people need to really see and service those?

691
00:42:28,400 --> 00:42:32,400
And so seed is the company that you make money on.

692
00:42:32,400 --> 00:42:33,400
You pay for that.

693
00:42:33,400 --> 00:42:38,400
And then you guys just build SST as the open source project.

694
00:42:38,400 --> 00:42:43,400
Yeah, the history of the company is a little bit funny because seed was originally built

695
00:42:43,400 --> 00:42:44,400
first.

696
00:42:44,400 --> 00:42:46,400
So SST didn't exist.

697
00:42:46,400 --> 00:42:50,400
And the idea was, okay, there's people doing serverless stuff.

698
00:42:50,400 --> 00:42:52,400
They're using a framework called serverless framework.

699
00:42:52,400 --> 00:42:55,400
But there's not really a good CI tool for serverless framework.

700
00:42:55,400 --> 00:42:58,400
Let's build a good CI tool for that.

701
00:42:58,400 --> 00:43:03,400
So seed originally, and even to this day is really optimized for this other framework.

702
00:43:03,400 --> 00:43:07,400
And it was launched, it grew, and it kind of continues to grow to this day.

703
00:43:07,400 --> 00:43:12,400
At some point, we realized, oh, okay, even if we capture 100% of the existing serverless

704
00:43:12,400 --> 00:43:15,400
market, that's a good business, but it's not an incredible business.

705
00:43:15,400 --> 00:43:20,400
And we realized that our role actually is to make it so more people are building serverless

706
00:43:20,400 --> 00:43:22,400
and identify, okay, what's stopping?

707
00:43:22,400 --> 00:43:27,400
Like you guys, what's stopping any company that's being started right now from building

708
00:43:27,400 --> 00:43:28,400
in this way?

709
00:43:28,400 --> 00:43:31,400
And the answer was like, no AWS is really hard to use.

710
00:43:31,400 --> 00:43:32,400
Yeah, yeah.

711
00:43:32,400 --> 00:43:33,400
The developer experience sucks.

712
00:43:34,400 --> 00:43:37,400
So that means we need to build our own framework to make this stuff more accessible.

713
00:43:37,400 --> 00:43:42,400
Once we grow that more, then we can come back and kind of work on seed again and make it

714
00:43:42,400 --> 00:43:43,400
more optimized for SSD.

715
00:43:43,400 --> 00:43:45,400
We're starting to hit that phase right now.

716
00:43:45,400 --> 00:43:49,400
I think in the second half this year, we're going to be going back to seed and really making

717
00:43:49,400 --> 00:43:51,400
it a good product for SSD.

718
00:43:51,400 --> 00:43:52,400
Nice.

719
00:43:52,400 --> 00:43:55,400
So you're super experienced in AWS.

720
00:43:55,400 --> 00:44:02,400
Do you have any tips or tricks for anybody who looks at the AWS page and has no idea what

721
00:44:02,400 --> 00:44:03,400
to do or where to go?

722
00:44:03,400 --> 00:44:09,400
Do you have any learning resources or ideas for how to pick up and understand AWS in a

723
00:44:09,400 --> 00:44:10,400
more complete way?

724
00:44:10,400 --> 00:44:11,400
Yeah.

725
00:44:11,400 --> 00:44:15,000
The thing that bothers me a lot is I think you're kind of screwed from the second you sign

726
00:44:15,000 --> 00:44:21,040
up for AWS because even setting up an account correctly, the default path is not puts you

727
00:44:21,040 --> 00:44:22,040
in the wrong path.

728
00:44:22,040 --> 00:44:26,520
It puts you into setting up like I am users and like creating credentials and like putting

729
00:44:26,520 --> 00:44:28,320
them in some random file.

730
00:44:28,320 --> 00:44:31,000
There's actually a really slick way to set all this stuff up.

731
00:44:31,000 --> 00:44:34,160
I made a video on it so people can go look that up.

732
00:44:34,160 --> 00:44:35,160
That's on your YouTube?

733
00:44:35,160 --> 00:44:36,160
Yeah.

734
00:44:36,160 --> 00:44:37,160
So that's the YouTube.

735
00:44:37,160 --> 00:44:41,120
We have a ton of resources there on one using SSD but also just using AWS in like a

736
00:44:41,120 --> 00:44:42,120
sane way.

737
00:44:42,120 --> 00:44:46,920
I think the thing is a little bit different about us is we're not AWS like solutions architects.

738
00:44:46,920 --> 00:44:50,000
Like we're not sitting here with like a bunch of certifications and doing things in this

739
00:44:50,000 --> 00:44:53,120
like crazy complex AWS way.

740
00:44:53,120 --> 00:44:59,600
We try to look at AWS and try to find like, okay, this isn't like best practice according

741
00:44:59,600 --> 00:45:02,120
to like the official AWS guidelines.

742
00:45:02,120 --> 00:45:06,920
But for most people, this is the right tradeoff and accessibility and like and something that

743
00:45:06,920 --> 00:45:08,120
actually makes sense.

744
00:45:08,120 --> 00:45:12,160
So a lot of our content is more geared to I just I'm just trying to get something done.

745
00:45:12,160 --> 00:45:17,200
I'm trying to be practical and this will work for, you know, the foreseeable future.

746
00:45:17,200 --> 00:45:22,480
So yeah, things like setting up it's called a AWS single sign on like so you can just log

747
00:45:22,480 --> 00:45:26,640
in AWS or Google account and don't do all your credentials through that.

748
00:45:27,000 --> 00:45:30,960
There's a bunch of little things like that that we try to cover in our like in the YouTube

749
00:45:30,960 --> 00:45:33,680
content we make.

750
00:45:33,680 --> 00:45:37,520
It is tricky and I think there is not a lot of good content out there for what you're

751
00:45:37,520 --> 00:45:38,520
asking for.

752
00:45:38,520 --> 00:45:42,520
There's a lot of AWS content, a lot of it's outdated and a lot of it doesn't have this

753
00:45:42,520 --> 00:45:47,680
like practical mindset to it and our focus for this year is we're going to be focusing

754
00:45:47,680 --> 00:45:53,120
a lot more on on the content stuff and helping people do this stuff a lot better.

755
00:45:53,120 --> 00:45:57,280
A framework does like 90% of it because you can just start using it without really understanding

756
00:45:57,280 --> 00:46:00,840
some of this stuff and over time you kind of naturally pick it up.

757
00:46:00,840 --> 00:46:04,760
But like I said, like even the moment you sign up, you probably are led down the wrong

758
00:46:04,760 --> 00:46:05,760
path.

759
00:46:05,760 --> 00:46:06,760
So there's still a lot of gaps to fill.

760
00:46:06,760 --> 00:46:10,520
So now it's the part of the show where we talk about basically we ask you questions.

761
00:46:10,520 --> 00:46:15,400
We ask everybody that the types of things that are should be kind of quick one off easy

762
00:46:15,400 --> 00:46:16,400
to answer questions.

763
00:46:16,400 --> 00:46:22,080
So first and foremost, what kind of computer and set up are you using to work on love

764
00:46:22,080 --> 00:46:23,080
this question.

765
00:46:23,080 --> 00:46:29,400
I have a custom built PC that I've been building and rebuilding for years kind of like a ship

766
00:46:29,400 --> 00:46:31,120
of DC situation.

767
00:46:31,120 --> 00:46:32,120
It runs Linux.

768
00:46:32,120 --> 00:46:37,440
I've been a full-time Linux user for 10 years or so, which makes me really annoying.

769
00:46:37,440 --> 00:46:39,440
I'm a really annoying person.

770
00:46:39,440 --> 00:46:40,440
Wow.

771
00:46:40,440 --> 00:46:41,440
What district do you run?

772
00:46:41,440 --> 00:46:47,760
Of course, I run Arch Linux, which is the most annoying OS to run.

773
00:46:47,760 --> 00:46:50,360
What text editor theme and font are you rocking?

774
00:46:50,360 --> 00:46:52,200
So I use NeoVim.

775
00:46:52,200 --> 00:46:55,320
The theme is I think it's called Tokyo Knight.

776
00:46:55,320 --> 00:47:01,120
The font is a Haskellogue, I think, which is like, there's a font called Haskellig and

777
00:47:01,120 --> 00:47:04,160
Haskellogue is like a modified version of it.

778
00:47:04,160 --> 00:47:08,880
I found it a long time ago and don't remember why I chose it, but here I am.

779
00:47:08,880 --> 00:47:14,720
If you had to start coding from scratch today, or if you were giving somebody advice who's

780
00:47:14,720 --> 00:47:18,560
picking up something to work on, what types of things would you recommend?

781
00:47:18,560 --> 00:47:19,560
Yeah.

782
00:47:19,560 --> 00:47:25,320
It's funny because when I first started coding, I got into it through C-sharp, which I thought

783
00:47:25,320 --> 00:47:27,280
was a really great entry point.

784
00:47:27,280 --> 00:47:32,560
It felt easy, accessible, and today I think everyone's getting into it through TypeScript,

785
00:47:32,560 --> 00:47:34,560
which effectively just looks exactly like C-sharp.

786
00:47:34,560 --> 00:47:39,200
You can just write C-sharp code into a TypeScript file and it probably will work.

787
00:47:39,200 --> 00:47:41,320
From my point of view, it worked really well for me.

788
00:47:41,320 --> 00:47:46,040
I know a lot of people worry about as a Type system in TypeScript, is that going to overwhelm

789
00:47:46,040 --> 00:47:49,400
a beginner, I was script first.

790
00:47:49,400 --> 00:47:55,360
My memory of learning C-sharp was I didn't really, that all made sense to me and having

791
00:47:55,360 --> 00:47:57,600
structured what I was doing was great.

792
00:47:57,600 --> 00:48:01,400
So I think TypeScript is a boring answer because I think it's probably what most people would

793
00:48:01,400 --> 00:48:02,400
say.

794
00:48:02,400 --> 00:48:04,920
I think it is a great entry point.

795
00:48:04,920 --> 00:48:08,640
Doing stuff in web is also great because you get to build stuff and you get to look

796
00:48:08,640 --> 00:48:09,640
at it right away.

797
00:48:09,640 --> 00:48:14,280
Everyone I was first learning, I loved that feedback loop of visually looking at something.

798
00:48:14,760 --> 00:48:16,280
I've been loving Astro for that.

799
00:48:16,280 --> 00:48:21,720
It reminds me of the old PHP days where I would just have a single file and I would

800
00:48:21,720 --> 00:48:24,360
write stuff and I could refresh the browser and see it.

801
00:48:24,360 --> 00:48:26,560
I think Astro reminds me a lot of that.

802
00:48:26,560 --> 00:48:31,840
So I think like the mix of TypeScript and Astro is a good combination because you don't

803
00:48:31,840 --> 00:48:37,040
have the complexity of Web Dev you would normally get, but you still are kind of learning the

804
00:48:37,040 --> 00:48:39,800
tools you'll need once you go down that path.

805
00:48:39,800 --> 00:48:41,840
What terminal and shell are you rocking?

806
00:48:41,840 --> 00:48:48,720
So I use Alacrity and the shell is ZSH again, just old decisions that stuck that they worked

807
00:48:48,720 --> 00:48:49,720
for me for years.

808
00:48:49,720 --> 00:48:50,720
So I haven't reevaluated.

809
00:48:50,720 --> 00:48:51,720
Ain't broke.

810
00:48:51,720 --> 00:48:52,720
Don't fix it.

811
00:48:52,720 --> 00:48:53,720
Yeah.

812
00:48:53,720 --> 00:48:54,720
That's funny.

813
00:48:54,720 --> 00:48:55,720
We just we just talked about Alacrity.

814
00:48:55,720 --> 00:49:00,720
I'm pretty sure we call the Alacrity, which is I mean, I might be saying it wrong too.

815
00:49:00,720 --> 00:49:04,120
These are words you never have to say out loud because you only just reading them on the

816
00:49:04,120 --> 00:49:06,720
screen, especially a word like that.

817
00:49:06,720 --> 00:49:07,720
Yeah.

818
00:49:07,720 --> 00:49:10,280
Why do you use that terminal is that the best one on Linux?

819
00:49:10,320 --> 00:49:14,000
So Alacrity, I think just has a lot of energy around it, like it's being actively developed.

820
00:49:14,000 --> 00:49:16,160
It is somewhat newer.

821
00:49:16,160 --> 00:49:21,320
It's written in Rust, which, you know, does a lot for a lot of people, but we got excited.

822
00:49:21,320 --> 00:49:23,000
But yeah, it performs really well.

823
00:49:23,000 --> 00:49:24,240
I actually don't know.

824
00:49:24,240 --> 00:49:30,160
I think I used to use something called URVXT, I think it was called.

825
00:49:30,160 --> 00:49:32,200
To be honest, the terminal wise, I can't really.

826
00:49:32,200 --> 00:49:37,040
So I use something called i3 in Linux.

827
00:49:37,040 --> 00:49:41,360
The tiling window manager, it basically puts everything on my screen.

828
00:49:41,360 --> 00:49:45,240
It's a tiles, whether it's a browser or a terminal, whatever it is, manage all of it

829
00:49:45,240 --> 00:49:47,480
through my keyboard and I have to use a mouse.

830
00:49:47,480 --> 00:49:52,320
So the terminal itself doesn't really matter because it's kind of like all the terminal

831
00:49:52,320 --> 00:49:56,600
specific features you'd expect, like tabs and stuff, it's picked in at a lower layer.

832
00:49:56,600 --> 00:49:57,600
Nice.

833
00:49:57,600 --> 00:49:58,600
Yeah.

834
00:49:58,600 --> 00:49:59,600
Yeah.

835
00:49:59,600 --> 00:50:01,280
That really is the way to be.

836
00:50:01,280 --> 00:50:07,800
I'm starting to get into really getting my whole, oh, the entire OS, essentially on

837
00:50:07,800 --> 00:50:12,920
the same keyboard shortcuts to do everything and just try to lock that down because so

838
00:50:12,920 --> 00:50:17,560
often I think even like, you know, Wes and I, we write these keyboard shortcuts, we set

839
00:50:17,560 --> 00:50:22,960
up these macros for like our text editor specifically, but not OS wide.

840
00:50:22,960 --> 00:50:26,840
I'm sure Linux is way better for that anyways.

841
00:50:26,840 --> 00:50:30,640
What about, what's something that you're excited for in the future of dev?

842
00:50:31,320 --> 00:50:35,640
So I'm going to talk a little bit about Cloudflare because I think I'm very interested in their

843
00:50:35,640 --> 00:50:36,640
path.

844
00:50:36,640 --> 00:50:41,440
There's a lot of cloud providers or people trying to become cloud providers, but the

845
00:50:41,440 --> 00:50:45,440
reality is AWS is the only one that really makes any money.

846
00:50:45,440 --> 00:50:49,640
You can, of course, Azure makes money, but that's more just, they're like monetizing

847
00:50:49,640 --> 00:50:52,960
the same customer base they've had for decades now.

848
00:50:52,960 --> 00:50:53,960
Yeah.

849
00:50:53,960 --> 00:51:00,760
And in terms of like making real money, like having young companies start on your platform

850
00:51:00,760 --> 00:51:05,320
and grow into a billion dollar companies, AWS is really the only one playing that game

851
00:51:05,320 --> 00:51:11,360
and winning it because you need to have a lot of primitives in place for it to really

852
00:51:11,360 --> 00:51:15,200
be viable for you to serve these, you know, like these public companies that are operating

853
00:51:15,200 --> 00:51:16,400
at huge scale.

854
00:51:16,400 --> 00:51:22,800
I think Cloudflare is the first company that I'm seeing where they actually have a shot

855
00:51:22,800 --> 00:51:24,720
at taking the same market share.

856
00:51:24,720 --> 00:51:28,720
The primitives they have, they have way fewer primitives, but they're starting serverless

857
00:51:28,720 --> 00:51:29,720
first.

858
00:51:29,720 --> 00:51:33,160
So they don't have all these like, I'm going to call anything not service like a legacy

859
00:51:33,160 --> 00:51:34,160
model.

860
00:51:34,160 --> 00:51:36,480
It doesn't really make sense in the modern world.

861
00:51:36,480 --> 00:51:40,840
They basically, so Cloudflare basically has like 10 primitives and these 10 primitives

862
00:51:40,840 --> 00:51:45,600
are everything you need to build like 99% of applications.

863
00:51:45,600 --> 00:51:50,880
I don't think a lot of people realize this yet, but it is technically possible today.

864
00:51:50,880 --> 00:51:56,480
I'm really looking forward to new companies realize this and try to build like fully Cloudflare

865
00:51:56,480 --> 00:51:57,480
native.

866
00:51:57,480 --> 00:52:02,320
There's a lot of potential there, and I think I'm excited to see what that looks like.

867
00:52:02,320 --> 00:52:07,760
Yeah, I've been a big Cloudflare user for a while, and I've been dipping into a lot

868
00:52:07,760 --> 00:52:13,240
of their, both a lot of their hosting products, but also just like a lot of their pro features

869
00:52:13,240 --> 00:52:14,240
as well.

870
00:52:14,240 --> 00:52:19,080
And it's funny, whenever I ask about any of the Cloudflare features on Twitter, people

871
00:52:19,080 --> 00:52:22,440
are just like, it's DNS and DDoS protection.

872
00:52:22,440 --> 00:52:25,480
That's all they know about Cloudflare second man.

873
00:52:25,480 --> 00:52:30,200
Little do you know that they're a massive, massive cloud company, and I think they're

874
00:52:30,200 --> 00:52:33,680
going to really pull up in the next couple of years, if not already have.

875
00:52:33,680 --> 00:52:35,440
Yeah, I've heavily invested in them also.

876
00:52:35,440 --> 00:52:39,280
So I'm just going to put that to the slimmer.

877
00:52:39,280 --> 00:52:40,280
I work on it.

878
00:52:40,280 --> 00:52:44,680
It'll be a stuff in my hedges, my Cloudflare position in case Cloudflare dominates them.

879
00:52:44,680 --> 00:52:45,680
That's fine.

880
00:52:45,680 --> 00:52:46,680
Cool.

881
00:52:46,680 --> 00:52:47,680
All right.

882
00:52:48,680 --> 00:52:49,880
Oh, no, sick pics.

883
00:52:49,880 --> 00:52:51,280
Do you have a sick pic for us today?

884
00:52:51,280 --> 00:52:53,280
Yeah, I guess I already talked about it.

885
00:52:53,280 --> 00:52:56,280
So planet scale, which we just talked about a little bit.

886
00:52:56,280 --> 00:53:00,520
It is, I'm sure a lot of people have heard about it already, is an awesome solution.

887
00:53:00,520 --> 00:53:07,120
I think what systems look like with and without planet scale, massively different and complexity.

888
00:53:07,120 --> 00:53:11,840
At this point, if you're starting a new service or starting a new product, you need a database.

889
00:53:11,840 --> 00:53:12,840
Just go to planet scale.

890
00:53:12,840 --> 00:53:15,560
It's going to work for you really well and work for you for a long time.

891
00:53:15,560 --> 00:53:20,040
So yeah, really, really excited about what they're doing, their roadmap and everything.

892
00:53:20,040 --> 00:53:21,040
It's awesome.

893
00:53:21,040 --> 00:53:24,640
It's solving problems that I've had for like my whole career, pretty much.

894
00:53:24,640 --> 00:53:25,640
Sick.

895
00:53:25,640 --> 00:53:26,640
Awesome.

896
00:53:26,640 --> 00:53:27,640
And shameless plugs.

897
00:53:27,640 --> 00:53:28,640
Would you like to plug?

898
00:53:28,640 --> 00:53:29,640
Where can we find you?

899
00:53:29,640 --> 00:53:30,640
Yeah.

900
00:53:30,640 --> 00:53:31,640
So I'm mostly on Twitter.

901
00:53:31,640 --> 00:53:33,920
THDXR is my username.

902
00:53:33,920 --> 00:53:39,720
I'm working on something kind of funny that I don't know if you maybe have seen, we announced

903
00:53:39,720 --> 00:53:41,840
it like a week ago.

904
00:53:41,840 --> 00:53:45,960
We're working on a game show for developers.

905
00:53:45,960 --> 00:53:49,680
So if you guys remember HQ trivia, you know, I would like your app would like light up

906
00:53:49,680 --> 00:53:52,840
once a day and there'd be like a 10 minute game show that everyone could kind of take

907
00:53:52,840 --> 00:53:54,360
part in live.

908
00:53:54,360 --> 00:53:56,160
We're doing, we're trying to launch something like that.

909
00:53:56,160 --> 00:53:57,160
It's called rebase.tv.

910
00:53:57,160 --> 00:54:01,760
You can find it on Twitter or rebase.tv.

911
00:54:01,760 --> 00:54:05,240
We haven't like launched our first game yet, but we're like in the process of building

912
00:54:05,240 --> 00:54:09,640
the app and doing all the production and we want to have really great production quality.

913
00:54:10,640 --> 00:54:13,880
But yeah, I think it would just be fun to have a thing that like, you know, the whole

914
00:54:13,880 --> 00:54:18,120
developer community is doing at the same time once a week or whatever it is.

915
00:54:18,120 --> 00:54:19,120
That's cool.

916
00:54:19,120 --> 00:54:21,800
Yeah, it's amazing how HQ just came and went, right?

917
00:54:21,800 --> 00:54:24,400
Well, we'll have to share the link for that, by the way, in the show notes.

918
00:54:24,400 --> 00:54:31,080
But there was a, um, there's a really fantastic podcast that detailed the entirety of the

919
00:54:31,080 --> 00:54:35,480
HQ rise and fall boom, bust HQ trivia.

920
00:54:35,480 --> 00:54:36,480
Yeah.

921
00:54:36,480 --> 00:54:39,320
And I think there's actually a documentary coming out about it.

922
00:54:39,320 --> 00:54:43,640
We had this idea last week or two weeks ago as we were looking at HQ and yeah, we really

923
00:54:43,640 --> 00:54:47,120
coincidentally, there's a new documentary coming out, but it might have, might already

924
00:54:47,120 --> 00:54:48,120
be out.

925
00:54:48,120 --> 00:54:52,720
I think TikTok is launching like an HQ concept as well.

926
00:54:52,720 --> 00:54:53,720
It's smart.

927
00:54:53,720 --> 00:54:54,720
Yeah.

928
00:54:54,720 --> 00:54:56,520
It was a, I mean, it was a lot of fun.

929
00:54:56,520 --> 00:54:57,520
Sick.

930
00:54:57,520 --> 00:54:58,520
Awesome.

931
00:54:58,520 --> 00:54:59,520
Well, thank you so much for coming on.

932
00:54:59,520 --> 00:55:05,520
Appreciate all your time and insights into the world of serverless and AWS and SST.

933
00:55:05,520 --> 00:55:06,520
Thanks so much for coming on.

934
00:55:06,520 --> 00:55:10,520
You guys are, you know, moving some of your stuff, AWS and you're understandably confused.

935
00:55:10,520 --> 00:55:11,520
Yeah.

936
00:55:11,520 --> 00:55:12,520
Please let me know.

937
00:55:12,520 --> 00:55:14,520
I kind of love helping people figure that out.

938
00:55:14,520 --> 00:55:15,920
Free migrations, you say.

939
00:55:15,920 --> 00:55:16,920
All right.

940
00:55:16,920 --> 00:55:18,920
I'll take you up on it.

941
00:55:18,920 --> 00:55:19,920
Cool.

942
00:55:19,920 --> 00:55:20,920
All right.

943
00:55:20,920 --> 00:55:21,920
Thanks again.

944
00:55:21,920 --> 00:55:22,920
I'll talk to you later.

945
00:55:22,920 --> 00:55:29,800
Head on over to syntax.fm for a full archive of all of our shows.

946
00:55:29,800 --> 00:55:33,760
And don't forget to subscribe in your podcast player or drop a review.

947
00:55:33,760 --> 00:55:34,760
If you like this show.

