我当然希望你饿了！
酷，我饿死了！
洗手，拉把椅子，确保反馈。
因为是时候听听斯科特·托林斯基和韦斯·博斯试图用人类语言交谈了
并挑选其他开发者的大脑。
我以为会有食物！
所以系好安全带，抓住那个旧把手
因为这次骑行会变得狂野！
这是…
语法晚餐俱乐部！
欢迎来到语法！
最美味的网络开发播客就在那里。
我们今天为您准备了另一个香肠晚餐俱乐部。
我们有人…
我承认，一个比我更酷的名字。
Dax Rad今天要讲的是…
我认为我们将主要讨论无服务器托管Next. js。
他负责几个不同的项目。
SST以及Open Next. js。
我们很高兴能谈论这一切。
欢迎，达克斯。你好吗？
我很好。谢谢你邀请我。
不客气，不客气。
我们今天由哨兵赞助。
让我们谈谈他们的新APM。
什么是APM？
应用、性能、监控。
所以这将做的是…
你正在抛出你的应用程序，它有点像试图监控会让你的网站变慢的东西。
几天前我们有一个关于慢速网站以及可能导致它的原因的节目。
所以哨兵将做的是探测普通的东西。
大型渲染阻塞资产、缓慢的数据库查询、主线程上的文件输入/输出。
这可能不是你想做的事情。
你知道，在节点中，你有正确的文件同步，这是…
那会屏蔽你的主线程。
在您实际完成该文件的写入之前，在该主线程上运行的任何其他内容都将无法运行。
所以这可能是一个很大很大的禁忌。
你会想去看看的。
APM里有很多。
我相信我会在接下来的几个广告中介绍它的特点。
你想去Sentry.io看看。
使用券码，美味佳肴，两个月免费。
我还想看看他们的博客文章，这是新的APM可操作的、负担得起的，并且实际上是为开发人员构建的。
谢谢你，哨兵，赞助。
我们将从2023年开始，我说，是我的AWS年。
所以我一直在看我的一些服务器账单和诸如此类的东西。
我说，伙计，能做这些东西真的很贵。
然后我看了看AWS，我说，这太难了。
我陷入了一个非常昂贵但显然很容易的境地，
相对于我认为更便宜的东西。
我们拭目以待。
但这就像，它有很多碎片。
所以我们试图，就像今年一样，我们试图更多地了解AWS并了解所有不同的部分等等。
所以你是我们第一个谈论这类事情的人。
让我们谈谈，你想快速概述你是谁和你做什么。
然后我想我们明年会先公开一些东西，然后我们会进入SST的东西。
好，听上去不错。
我的名字是Dax
我完全开源，我现在的处境很幸运。
我从事的主要项目称为SST。
这是一个框架，可帮助像您这样的人开始在AWS上构建东西，而无需完全暴露在AWS的怪物中。
因为就像你说的，有很多很好的理由在AWS上构建，
尤其是对于更严重的事情，当你开始达到一定的规模时。
但对普通人来说是很难接近的。
所以我们的工作是真正挖掘所有AWS文档，阅读所有内容，
找出所有奇怪的小怪癖，然后揭露一些对最终用户更有意义的东西，
弄清楚在他们的日常开发周期中有什么样的粗糙边缘，并使所有这些更加平滑。
我先问一个问题，有一天我掉进了这个兔子洞。
我在登录AWS的地方发布了一条推文，并查看了我创建的一些配置文件。
其中一个年龄岁数12
然后我发微博说，12年来有没有变得更好？
一半的人说不，一半的人说是。
所以我就像，我只想在AWS上部署一个无服务器函数。
我喜欢它，喜欢没有建设流水线，有所有这些产品。
为什么AWS没有Netlify或Vercel之类的东西？
或者说，为什么他们没有呢？
比如，为什么所有这些建立在AWS之上的业务都更容易？
问题是AWS确实认为他们有这个能力，他们已经尝试了三四次Netlify
或Vercel或Heroku或其他任何东西。
我想我忘了是谁了。
有人记录了部署容器的所有不同方法。
有一些东西创造了18种不同的方法，你可以做到这一点，因为它们代表了所有这些尝试
AWS试图创建更高级别的抽象以使其中一些事情更简单。
我只是不认为这是他们的基因。
他们是一家基础设施超大规模公司。
他们要在全世界部署大量的物理硬件，让它工作。
这与开发人员在尝试构建某些东西时的日常体验相去甚远。
我认为这在文化上很不适合他们。
很有趣。
是的，确实感觉那是很长一段时间的事情了。
我的意思是，甚至Amazon.com本身，我认为他们从来没有像许多其他公司那样在用户界面部门进行过润色。
这似乎确实让AWS的人望而却步。
就像你提到的，韦斯，它为所有这些建立在AWS之上的其他业务打开了大门，只是为了成功
对人们来说更容易，对吧？
所以你认为AWS没有解决这个问题是一件积极的事情吗，因为它让所有这些其他公司得以存在？
还是你认为他们最终会到达那里？
是的，我想对我来说，我总是，我发现自己处于一个棘手的境地，因为我将在AWS尝试做一些事情。
我会很沮丧，希望它能更好。
我会对某些造成这些问题的服务背后的团队感到恼火。
然后我会意识到，哦，好吧，如果他们真的做了所有这些事情，我就不会真正有工作了。
所以我非常欣赏它创造的差距。
我认为这是一个很好的系统。
AWS的范围非常大。
他们试图为所有可能的业务提供服务。
现实是建立良好的服务。
你必须缩小你的范围很多。
很多这样的公司人们喜欢像凡尔赛或Netlify他们的范围是狭窄得多就他们试图提供什么
以及他们试图为谁服务，而不是AWS能做什么。
这就是为什么他们有一个好产品。
我认为在某些情况下，我认为这是现实，在AWS的范围内，你只是，你真的无法构建那么好的东西。
好吧，让我们进入开放的Next. js内容。
所以Next. js，巨大的，可能是最大的用于构建网站的React框架。
它涵盖了很多东西。
它显然很紧，也不是很紧，但它是，它是凡尔赛宫的婴儿。
凡尔赛是一个令人惊叹的托管平台，它提供图像和CDN，缓存和部署预览以及无服务器和边功能。
他们无所不能。
编写XJS应用程序并将其托管在凡尔赛宫的类似体验是一种非常非常好的体验。
我们托管，这是我们用于语法网站的确切堆栈和托管平台。
但是经常有人说，嗯，在其他地方托管XJS网站并不容易。
他们提供了一些出口之类的东西。
所以你想给我们一个概要，比如，什么是开放的Next. js项目？
是的，所以我认为前提是，就像你说的，在凡尔赛宫托管Next. js是一次不可思议的体验。
试着在其他地方举办，你有各种不同的，不同的选择和各种不同的经历。
因此，您可以在容器中自行托管Next. js。
凡尔赛宫很容易支持这一点，因为这只是一个长期运行的过程，实际上可以做他们需要做的一切。
但是对于很多人来说，在容器中自行托管Next. js与他们从凡尔赛宫获得的完全不同。
就成本而言，是的，我是说，它一直在运行。
当你必须在任何地方部署容器时，拥有全球可用性之类的东西会有点贵。
当大多数人想到我想自己托管Next. js时，他们希望它是完全无服务器的，部署到AWS提供的函数和无服务器原语类型。
这个过程其实并不简单。
我不会明确地说凡尔赛宫不允许你这样做。
他们实际上确实在创建标准输出方面付出了很多努力，以便您可以使用Next. js应用程序并有可能让它在AWS中自托管。
但是从构建输出到实际部署之间的差距是相当大的。
您需要成为AWS方面的专家。
你真的需要了解你做事的不同方式。
您还需要了解Next. js非常详细的内部结构，了解Next实际提供的不同组件。
部署AWS的方法不止一种。
有许多不同的部署方式，您可以进行不同的权衡。
你可以，你知道，有些功能在完全的环境中是无法工作的。
这真的很难，需要很多人的时间来弄清楚。
这就是我们开始打开的下一个项目，因为有很多不同的努力在做这件事。
我们有一个，有一个更旧的项目，叫做无服务器Next. js，很多公司都在使用。
事实上，AWS甚至在内部使用这个开源项目来支持他们的Next. js产品。
当然，就像一个人不可能维持那么久。
那个项目就这样夭折了，几乎没有尝试这样做的分支。
我们的社区对希望在AWS中运行Next. js的人有足够的兴趣，我们有一段时间避免构建这个项目。
我们真的不想仅仅因为工作量大就去做。
但是我们已经到了这样一个地步，社区里有足够的专业知识让我们可以继续建造它。
那么有多少人参与了这样的工作呢？
是的。所以从我们的核心团队中，我们有弗兰克，他几乎领导了这项工作。
他在这上面花了很多时间。
有一点前期工作，你知道，要达到一个与Vercel提供的产品一对一的水平。
然后从那里开始，更多的维护。
然后在社区的帮助方面，我想我们有五六个人整天都在谈论这个。
我们SST的人实际上都不是Next. js用户，这有点有趣，因为我们是这项工作的幕后黑手。
所以我们不是Next. js应该如何工作的细节或它的确切特性的专家。
我们真的依靠我们的社区来报告事情是如何运作的，什么事情不完全正确。
他们发现了很多非常模糊的东西，比如他们会弄清楚，哦，我们需要传递这个明确的表头，就像这个非常具体的特征一样。
让我们浏览Next. js的不同部分，我们将把它们映射到亚马逊产品。
因此，Next. js的核心是拆分其路由。
所以每次你进入一个网址，它都会变成一个无服务器函数。对吗？
所以不完全是。
因此，构建输出输出一个处理所有路由的函数。
这意味着这都捆绑成一种胖lambda函数。
然后他们有自己的边函数概念，这有点独立。
好吧，实际上每一条路由都捆绑到一个应用程序中，并在一个无服务器函数上运行。
因为我记得Vercel在的时候是现在吗？
他们离开了节点。
我在节点上运行了一个Express应用程序，他们就像，是的，把它扔进lambda函数中。
就像它不合适一样。
好像它对那种东西来说太大了。
有硬性限制吗？
出于某种原因，我认为他们将每个URL拆分。
因此，他们实际上是将您的整个应用程序后端API路由和所有内容放入一个无服务器函数中。
嗯，所以我怀疑Vercel在内部所做的可能与开源Next. js生成的构建输出有点不同。
所以是的，你是对的。
从长远来看，将所有内容捆绑到单个函数并不是很好。
如果你有一个依赖一条路线，那真的很大。
一些遇到冷启动的东西，就像你应用程序中的所有路线一样。
所以我怀疑Next. js或Vercel可能会在部署到他们的平台时进行某种拆分。
这很有挑战性。
使用API路由之类的东西很容易，比如API路由拆分得很好。
但是嵌套的UI路由有点棘手，尤其是新的应用程序布局。
是的，是的，这不仅仅让我在Next. js上，而且总的来说，就像，是的，你把所有东西都放在你自己的里面，每个路由都有自己的JSON包。
这让我很恼火，因为我想，我不希望每个函数的每个包都是JSON。
然后其他人说，好吧，现在你有了共享代码的特殊包。
你可以把任何你想要的东西放在共享代码中，但是我想，好吧，好吧，现在我必须做出决定。
我能把它放在我想要的地方，它就会从那里弄清楚吗？
我假设，或者我不是假设，也许这就是Vercel在他们那边所做的，他们做了一堆摇树或诸如此类的事情来使功能尽可能小。
因为小巧，部署得非常快，你会得到很好的冷启动。
当那东西真的起作用时，真是太好了。
是的，这是我们实际上鼓励的模式。
我们的主要框架SST，我们谈论类似的东西。
你不愿意，在作者的时候，你不愿意把它想成像这些完全离散型的独立事物。
您想构建一个大型应用程序。
在部署的时候，你希望它被分解，树摇晃等等。
这就是我们喜欢的模式。
这是我们鼓励的，因为，是的，当你建造东西的时候，细粒度地思考有点烦人。
然后下一个爵士乐有一个中间件的概念。
这些被部署到边。
你能给我们简单介绍一下吗？
我们已经在节目中讨论过几次了，但是我肯定人们仍然不太熟悉。
边是什么？
是的，所以这个真的很棘手。
因此，我们难以实施的原因是Vercel本身主要在AWS上运行。
因此，当您在XDS上运行函数时，抱歉，在Vercel上，它会使这两个混淆。
在Vercel上，它在AWS中运行。
但是他们的很多边的东西都是由CloudFlare提供支持的。
因此，当中间件在边运行时，它不是在AWS数据中心运行，而是在CloudFlare数据中心运行。
CloudFlare数据中心数量更多，离最终用户更近。
他们能力较弱，但足以管理中间件。
所以我们面临的一个巨大挑战是，好吧，如果你想自己主持所有的下一个爵士乐，包括中间件，
我们必须在AWS内部部署该中间件。
这意味着我们必须遵守不同的约束，而Vercel没有。
因为他们可以选择任何他们想要的架构。
是啊是啊。
如果你去找小贩，他们会说，你知道吗？
我们只是，我们会帮你弄清楚的，我们会快点。
所以我们谈论的边函数的限制，这对于在CloudFlare工作人员的Dino中运行是正确的。
我们讨论过的其他几个运行时是，它不是一个没有爵士乐的环境。
这是一个JavaScript Web环境。
并且您只有一组可用的API。
有一天，我改变了一个很小的网站，我就像，你知道吗？
我要在Netlify边运行，也就是在迪诺运行。
所以你不能使用任何Node. js API，除非Dino支持它们和大型包等等。
所以这是有一点限制的，但是好处是什么？
加载速度越来越快。
他们将它们部署到世界各地数百个不同的服务器位置。
正是。
因此，如果您查看AWS上的传统Lambda函数，它们不会对您使用的语言固执己见。
您可以使用它们原生支持的各种不同语言。
您可以为所需的语言带来自己的自定义运行时。
这限制了他们的架构。
他们必须构建一个函数平台来运行任何任意代码。
像CloudFlare这样的一些边平台，它们，同样，都是关于缩小范围的。
只要你缩小范围，你就可以真正提高质量。
他们说你不仅可以，你不仅可以训练JavaScript，
但是我们提供的运行时的一种非常特殊的风格。
对于大多数事情来说已经足够好了。
如果你接受这些约束，我们可以做一些非常有趣的事情。
其中一个基本上是零冷启动。
他们在CloudFlare边计费是相当令人难以置信的。
让我看看我能不能解释一下。
所以如果你只支付计算时间，这意味着如果你的函数启动，计算一些东西，
然后发出网络请求，等待500毫秒的网络请求。
你实际上没有收到等待时间的账单。
只有在网络请求返回并再次使用CPU时才构建。
这创造了一个非常简单的概念，但它创造了如此多的事情和如此多的机会，为您可以构建的事情。
在传统的功能平台上是不可能的。
我记得看到过，因为我记得在CloudFlare工作人员上看到过10毫秒或类似的时间。
我当时想，这还不够。
那么谁可能在10毫秒内运行代码？
就是这样。
但我从来没有达到过。
我从来没有碰到过这个问题。
然后有人跟我解释说，不，不是的。
如果您正在获取CloudFlare工作人员真正擅长的一件大事，那就是代理网页。
所以如果你要NBA.com下载所有的超文本标记语言，然后等待它回来，
你不会为那段时间付钱的。
这很疯狂。
比如，他们没有向你收费吗？
还是他们真的在你等待的时候把它旋转下来了？
是的。
所以从技术上讲，他们不会像你的函数那样在那个时候离开CPU。
它只是在等待网络硬件说，嘿，下载完成了。
我有一个有效载荷给你。
所以他们还是有记忆成本的。
但是CPU成本是有限的。
因此，当您等待请求返回时，他们可以让其他客户在该CPU上运行。
这就是他们如何在同一秒内将商品卖给不同的人。
这是一个可以大规模运行的模型。
哇。
人们经常理解的另一件事是，如果你看看这些东西的定价，
他们按计算小时向您收费。
只是普通人看着它说，我该怎么做？
你有没有什么建议，比如你会如何计算这种事情？
或者只是一个，你必须看到定价在无服务器的世界里是一件有趣的事情。
这几乎是事后诸葛亮。
我想说，我认为人们试图想出提前计算成本的方法。
我认为现实是你不能提前知道成本。
更多的是围绕你的成本改变你的心态。
我认为我们习惯于按月支付费用。
现在，就像如果您考虑我们的个人生活一样，我们每月支付账单。
但是当涉及到云基础设施和涉及您业务的事情时，
我认为最好把它想象成边际成本，你只需要确保你向别人收取的费用高于你的边际成本。
所以为了满足一个请求，你要花一分钱。
确保你为此收取10美分。
这样，你每月的账单是多少并不重要，因为如果你扩大100倍，
你的间隔还说得通吧？
你永远不会变得消极，只要你在想单位经济学。
但这很棘手。
就像定价是直观的，现在甚至不是计算时间。
大概是每毫秒。
比如这个月你打算用多少毫秒？
这不是你能猜到的。
你可以事后看看，看看是什么。
在这个上面运行东西也会非常便宜吗？
是的，我认为定价有很多混乱。
我想人们，我听到人们本能地说无服务器的东西真的很贵。
我也听到人们本能地说它不贵。
实际上，它非常便宜。
这些数字和你计算这些数字的方式有点违反直觉，
这就是为什么人们可能会认为它们很贵。
但它非常便宜。
我想我的账单上没有超过5美元的。
我经营一些事情，比如严重的交通。
我认为至少AWS的文化是他们从未提高过价格。
有些服务现在比推出时便宜99%。
他们知道他们离开房间的那一刻，其他人就会进来提供更便宜的服务。
所以你会看到价格下跌，下跌，下跌。
Lambda是我最喜欢的例子之一，让我看看我是否还记得确切的数字。
所以它们过去每100毫秒充电一次。
因此，如果您有一个需要20毫秒的请求，您将被收取100毫秒的费用。
然后有一天他们出来说，好吧，我们现在要向你收取每毫秒的费用。
这意味着你的成本现在在一夜之间便宜了80%，而你什么也没做。
这样的例子不胜枚举
我认为人们有点担心所有这些云原生服务。
我会被困住吗？
他们会抬高价格，我会完蛋的。
从历史上看，至少在这些现代公司中，他们理解上一代公司的错误。
我试着这么做。
我知道他们必须确保价格继续下降。
我会给你另一个例子，我把我的课程平台渲染为一个长时间运行的节点应用程序。
我最近一直在考虑将其迁移到无服务器，因为特别是因为我对拉取请求进行了拉取请求预览。
我有一个拉取请求在那里坐了三四个月。
我还没准备好面对它。
然后我有三四个人跑了几个星期。
然后我意识到每个拉取请求都是另一个虚拟机，它被启动并运行，直到我合并拉取请求。
如果你的常规虚拟机每月花费10美元，然后你又有六个拉取请求每月花费10美元，那很快就会失控。
显而易见的答案是合并和快速。
这样做更便宜。
但我想，伙计，如果这是无服务器功能，它实际上不会运行，直到我单击URL，那个东西会再次旋转。
是的，这就是为什么有些成本是违反直觉的。
很容易只考虑正式生产环境的一个非常狭窄的版本。
就像想象一个容器运行生产一样。
但该容器必须至少具有相当高的可用性。
然后你有你的开发环境和拉取请求环境，所有这些加起来。
而这不仅仅是计算的一部分。
你能用无服务器的方式支付你的数据库吗？
如果可以，那么您可以为每个拉取请求环境建立一个单独的数据库，并且不需要任何成本。
因此，我们看到很多人专门为开发人员环境和拉取请求环境使用无服务器。
图像和资产呢？
所以我知道Next. js有非常好的图像组件。
我会让你在飞行中调整大小。
这种事情你也可以在无服务器的世界里做吗？
是的，所以他们的标准构建输出输出一个可以做到这一点的函数。
我们只是将其部署为另一个无服务器函数。
实际上这部分开箱即用。
我认为问题是没有任何特定于您的应用程序的东西。
就像图像大小调整和所有这些工具就像一个通用的解决方案，对吗？
你只是路过。
它只是传递您需要的图像并处理大小调整。
这就是我们在自托管版本中支持的内容。
是的，就像坐在CDN后面一样。
所以它被优化了。
太棒了。
然后CDN是如此云耀斑或抱歉，不是云耀斑。
是的，云端和S3，对吗？
它同时使用这两个吗？
是的。
因此，当我们构建您的Next. js应用程序时，它会吐出一些东西。
有一堆不会改变的静态文件。
这些被上传到S3，然后放在CDN后面，也就是云前端。
您的功能实际上也被放在CDN后面。
还有您的主应用程序的功能。
我们还部署了一些边函数。
所以AWS确实支持边函数。
这些实际上与CDN生活在相同的环境中。
我们为Next. js中间件部署边函数，中间件。
那是什么，所以我实际上在看，我自己主要使用Svelte和Svelte套件。
他们有这种适配器情况，您可以有一个输出适配器。
我基本上找到了Svelte套件适配器AWS CDK。
他们的图表和你们看到的很相似，对吧？
您有S3存储桶，您有CDN的云前端和静态资产
对于S3桶。
CDK是亚马逊正在做的事情的顶层吗？
或者这只是您如何在本地开发云应用程序的名称？
是的，所以当你开始看AWS时，你会意识到它就像疯狂的层数。
让我看看蚂蚁是不是一直往下走。
因此，AWS有一个基础设施作为代码工具，称为云形成。
这一切意味着不要进入AWS UI，而是单击一堆东西来配置一些东西，
您可以在这个YAML规范中完成这一切。
太可怕了。
没有人应该使用它。
每个人都讨厌使用它。
所以他们建立了一个编译为云形成的层，叫做CDK。
因此，您可以编写类型而不是编写YAML。
我对CDK有很多问题。
他们优化它，这样你就可以用各种不同的语言编写它，比如打字稿、Python、
我认为Java，围棋，其他几个，都编译成这个云形成YAML。
99%的人，我认为他们只是在TypeScript中使用它。
所以我只希望他们只是针对TypeScript进行了优化。
我正在尝试制作多语言的东西。
所以今天，作为AWS上的现代应用程序，我认为CDK是一个很好的选择。
很多人还在直接使用云阵，只是因为他们有经验。
SST，我们建造的东西实际上是建立在CDK之上的。
所以我们在CDK和一些内部结构方面有很多经验。
所以如果有人选择使用CDK，他们会选择为此付费吗？
还是他们仍然只为底层服务付费？
是的，所以云阵法没有任何费用。
所以这只是一种部署东西的方式。
是的，所以我们有一段时间了，我们有贝京的布莱恩·拉鲁，
他们似乎有点变速了，这有点有趣。
所以他经营着一个名为Architect的项目，即Arc. Code。
基本上，这是你的基础设施作为代码，
这将编译为云形成。
这很有趣。有很多人把它建在上面。
所以我们谈论这个。
我将再谈一个，然后让我们进入什么是SST。
还有一个大家一直向我推荐的产品，Terraform。
你熟悉那个吗？你能解释一下那是什么吗？
是的，所以Terraform是另一个作为代码工具的基础设施，它不依赖于任何特定的云提供商。
我其实是Terraform生态系统的超级粉丝。
我曾经在Terraform中构建一切，就像，
在我开始研究SST之前，大概做了四五年。
他们的界面不是YAML，但它是一种类似的配置语言。
我会说它比YAML好得多，但您基本上可以配置任何东西。
您可以在AWS中配置东西，也可以在CloudFlare中配置东西。
你可以，比如，让它打开你房子里的灯。
就像，你可以用它做任何事情，
它基本上是描述任何系统状态的一种方式
让它，你知道，保持这种状态，并随着时间的推移对其进行更改。
这是一个很棒的中立开源工具，不依赖于任何特定的供应商。
事实上，我们并不是在短期内，而是从长远来看，我们希望更多地建立在Terraform之上。
而不是建立在CDK之上，这样我们就可以访问一些更大的生态系统。
是的。
好吧，所以你已经谈了很多关于SST的事情，但是，就像，让我们给我们30分钟或者什么都不要，
这是一个30秒，一分钟的概要，你为什么要建造这个？
是的，所以这里的前提是，就像我之前说的，AWS实际上是大多数公司的绝佳选择
制造他们试图出售给其他人的产品。
很难理解AWS中发生的任何事情。
通过控制台，你不会真正理解它，留档。
在你知道做某事的正确方法之前，有很多东西要学。
所以这里的想法是让我们构建一个框架，这是我们对在AWS上构建应用程序的最佳方式的想法。
因此，我们不会涵盖所有AWS。
我想说我们可能覆盖了AWS的2%，这可能是大多数人需要的2%。
我们只专注于无服务器服务，我们提供高级合同，比如API，
数据库，诸如cron作业、队列、长时间运行的作业、计划事件之类的东西
这是您可以启动的大多数应用程序所需的高级部分
并配置然后访问您的应用程序代码。
我们的范围相当广泛。
我们会讲到一些基础设施相关的东西
我们还将介绍在您的应用程序中出现的粗糙边缘。
就像我说的，我们正在做开放下一步的事情，所以我们帮助你部署你的前端，比如说，
AWS也是如此。
我们只是想让您在AWS的第一天就开始一个项目而无需做所有这些工作
的理解和研究。
但是，你知道，随着你公司的发展，随着你产品的发展，第100天，第1000天，
您仍然基于AWS构建，因此您不需要真正弹出到其他东西中。
所以我们的想法是，在开始的时候保持简单，但它会一直伴随着你。
从长远来看。
如果你在外面听到2%的AWS，你会认为这不是很多，
只需转到AWS左上角的服务，
单击所有服务并开始滚动，然后到明天您将到达它的底部。
正是。
他们有很多东西，你最终会需要其中的一些。
这是你在开始应用程序之前会学会的东西吗？
或者我知道你有框架适配器，但我正在查看文档，
还有，比如，如果我只想从URL收到一个原始请求，
它有路由器吗？
比如，这在哪里合适？
我是在此基础上构建，还是将我现有的应用程序放入其中？
是的，所以我们有两种不同的选择。
对大多数人来说，我们建议，如果你要重新开始，
你从一个新的SSC项目开始，它为你准备了一个可以工作很长时间的东西。
你可以配置它，我只想要一个API，或者我有一个API加上一个GraphQL，
或者我有一个XJS应用程序。
你可以随心所欲地进行配置。
我们将其视为您正在构建的SST应用程序。
我们也有一种叫做投放模式的东西，我们一个框架一个框架地发布。
几周前我们为Astro做了一个发布，下周我们将为下一个JS做一个。
基本上，您有一个现有的Astro应用程序。
您有一个现有的下一个JS应用程序，无论它是什么。
您只想将其放入并在AWS进行部署。
您并没有真正尝试构建成熟的SSC应用程序。
这基本上需要你放入一个文件，你知道，
您可以将您拥有的一切部署到AWS。
哦，真酷。
那本地开发体验呢？
有一件事总是让我发疯，那就是，好吧，
我可以在本地运行这个东西，但我有一整套其他的东西。
并试图复制本地环境。
是的，很痛苦。
比如，你能解决这种痛苦吗？
这实际上就是SSC开始的地方。
我就是这样找到这个项目的。
我第一次去无服务器，就像你说的，
我的第一个问题是，我到底是怎么做地方开发的？
当一切都在云端时？
我正在构建我自己的蹩脚解决方案，
我发现SSC会在那个时候出现，
他们推出了一个非常，有点像单一特征。
这是一个实时lambda调试。
这里的想法是我们推荐的建筑设置，比如，
这些AWS原生系统是您远程想要的大部分东西，
比如，你想远程的数据库很棒，
比如，你的队列远程运行很棒。
糟糕的是当你在函数代码中进行更改时，
你不想等它上传AWS，
这可能需要五秒钟，就像，
有整个反馈循环。
所以SST最初有一个绝妙的想法，
让我们真正部署99%的应用程序，
因为你不经常换。
但是对于函数，让我们部署一个假函数，
当请求命中该函数时，
我们将把它转发到您的本地机器，在本地执行，
然后将响应发送回来。
所以这意味着当你做出改变时，
而不是等待五秒钟的更新，
就像ES构建的运行速度一样。
50毫秒的响应时间。
所以我们实际上最初是从弄清楚，
它使当地的开发体验非常好。
从那时起，我们已经围绕它添加了很多东西。
解决其他粗糙的边缘。
但是今天，当你做SST开发时，
这基本上在本地模式下打开您的SST应用程序，
它感觉就像一个普通的、本地运行的应用程序，
它的所有好处大部分在云中运行。
当你部署到生产环境时，没有太大的区别。
这是几乎完全相同的环境。
就像你在开发模式下所拥有的一样。
哦，真酷。
你会做任何…
我不知道你有没有说过这个。
SST也做边功能吗？
是的，所以我们没有本地合同。
所以SST提供了一套本地SST合约。
我们还没有边函数。
但是您可以直接进入CDK并自己部署边函数。
它只是稍微复杂一点，不像其他SST合同那么好。
但我们最终可能会支持这一点。
是的，这是我一直在想的一件事，
本地环境是什么样的
用于开发边功能？
因为你需要约束它。
如果你在节点中运行它，那么有人会意外导入节点应用程序
然后它不起作用，然后你部署它。
所以我知道CloudFlare有MiniFlare，这是…
我认为这是一个节点环境，就像，
他们做了一些事情来配对。
你显然可以在迪诺运行它。
你有什么想法吗？或者不是你已经进入的东西？
不，所以我应该提到的是AWS的边函数
实际上只是普通的Node. js函数。
因此，它们是唯一允许您在边运行节点的提供程序。
哦，好的。
所以他们实际上…
我们其实没有这个问题。
我们只是，你知道，在本地节点运行，一切都会好的。
是的，但是对于像CloudFlare这样的其他服务，
他们基本上只是让你在本地边运行他们正在运行的运行时
这会限制它。
所以你在本地有一个复制的环境。
可能不再是一个问题，
上周，CloudFlare宣布它现在支持
更多的节点API。
迪诺现在与节点和奥班平起平坐。
所以在某一点上，我们只有节点API
它可以在任何地方运行。
也许在这一点上，我们在一个边函数中运行一切？
是的，我认为边功能…
我只是在说我的屁股。
我真的不知道。
所以我们没有边建边…
我们是用户驱动型的，所以我们只做东西
当人们开始要求它的时候。
没有人真的要求边功能。
原因是它们在你的架构体系中有点不合适。
我喜欢的描述方式是，想象你有一根绳子
绳子上有不同的珠子。
一颗珠子就是一个用户。
另一颗珠子，比方说，你的API
另一颗珠子是你的数据库。
如果你开始移动你的API，让你的功能更接近用户，
他们现在离你的数据库更远了。
所以现在，往返数据库的费用更高。
因此，您可以将函数移近用户。
但是如果您需要进行两次数据库调用来处理该请求，
整体上可能会更慢。
还有一个搬家的问题…
好吧，我们能把数据库也搬到离用户更近的地方吗？
但是现在数据库离其他数据库节点更远了。
因此，您总是会受到分布式系统问题的限制。
我认为现在这边有很多炒作，
但我认为除了前端渲染之外，
没有太多的采用和服务后端请求。
很有趣。
很高兴我能知道这点。
你能从SSD的角度谈谈数据库吗？
我们应该使用什么？
是的，所以我们支持两个数据库开箱即用。
一个是DynamoDB，另一个是RDS。
AWS有一个关系…
这是一个无服务器关系数据库服务。
所以我的SQL或Postgres，你可以在这里部署它。
它不是真正的无服务器，就像假无服务器一样。
他们会为你打开和关闭并自动缩放。
我们对此表示支持。
我们不建议任何人实际使用它，除非他们被迫仅使用AWS
因为像行星尺度和霓虹灯这样的东西，
以无服务器方式运行关系数据库的更好选择。
在DynamoDB方面，DynamoDB是一个非常非常好的数据库，
它在无服务器环境中运行得非常好
和无服务器架构。
这是一个学习的挑战。
其中有一种模式称为单表设计。
如果您主要来自关系数据库，
这对你来说会非常非常奇怪。
真的很棒，我认为值得花时间学习，
因为如果你学会了，你可以构建基本上无限扩展的系统，
您再也不用担心数据库扩展了。
但是如果你真的没有那种强烈的需求，
然后我会说去一些新的关系数据库服务，比如行星尺度。
因此，来自Mongo上下文等非关系数据库的人，
他们是否更有可能掌握一些背景，
还是完全是他自己的事？
我试过了。太可怕了。
我捡不起来，是的。
所以假设，Mongo开发人员应该能够拿起它，
但我认为考虑到蒙戈的历史，
许多使用Mongo的人没有正确使用它。
但是，是的，所以我想如果你来自像卡珊德拉这样的地方
或者许多其他可能不太受欢迎、SQL的数据库，
这很熟悉，你可以理解其中的限制。
对SQL有一点误解，你不能使用它
对于关系数据库，关系数据。
所有数据都是关系数据，就像我从未见过非关系数据集一样。
您可以在Dynamo中建模所有这些。
这非常不同，非常奇怪。
我在我的大部分项目中都使用它，但我们绝对承认有一个很大的学习曲线。
太好了。
所以我们有一个关于无服务器数据库的完整节目，我们讨论过
关系与非关系。
最后我说我真的很喜欢行星尺度的方法，
因为你可以使用任何适配器，如果你知道MySQL，
或者您可以使用您习惯使用的任何库
无论如何，当地的发展是伟大的。
然后您可以将其部署到确实使其无服务器的服务。
我认为这是一个非常好的方法。
是的，行星规模很棒。
我们试图让大多数人沿着这条路走下去。
我们只是有，因为我们在AWS世界，我们有很多像
企业用户喜欢，我们无法在AWS之外部署任何东西。
所以他们被困在RDS上，我真的希望AWS在那里赶上地球规模。
差距就像荒谬的。
它甚至不是关闭。
建成的管道呢？
这是我去亚马逊他们告诉你的另一件事，
从字面上压缩无服务器函数并按下上传按钮
你可以上传一个东西的zip文件。
我就想，说真的，喜欢在哪里，
获得部署自动构建类型的东西？
你对此有什么解决办法？
是的，我要给你一些建议。
永远不要再登录AWS控制台。
你永远不需要深入其中。
里面所有的信息都是错的。
所以别进去。
所以对于SST，因为它是作为代码工具的基础设施，
作为其中的一部分，我们知道您的应用程序需要部署的所有内容。
我们为您打造一切。
所以我们喜欢同时进行所有功能的构建，比如高效地完成所有功能。
我们将其输出到一个工件中，然后我们也会为您部署。
如果您想先构建它，然后再部署它，您可以将其拆分。
但通常人们只是一次构建和部署。
因此，我们的CLI，您知道，SST部署将为您部署所有内容。
就CI而言，这实际上是我们赚钱的地方。
所以我们有一个产品叫种子。
它是针对SST和其他无服务器项目优化的构建工具。
它只是做了一堆通用构建工具永远不会费心做的事情。
仅仅因为我们知道您的应用程序的确切结构。
所以我们的很多用户都在使用它来自动化他们的构建
并且喜欢公关环境和不同分支机构的环境，诸如此类的东西。
我们喜欢做一些事情，比如一旦部署就监控所有这些。
因此，因为我们知道所有功能都已部署，我们可以添加挂钩来查看所有日志。
如果我们看到一些看起来像错误的东西，我们可以提取错误，构建它，
有点像哨兵会做的事。
诸如此类的事情。
这就是我们如何货币化我们的开源东西。
谢谢你。
哦，真酷。
它还会告诉你你的功能需要多长时间才能运行吗？
为什么不呢？
或者你必须进入AWS控制台并查看那里的图表。
我们的目标是最终到达那里，这样你就永远不需要去那里。
我们现在确实有一些基本的可观察性工具。
我们还没有在这方面投入太多，但最终我们确实想了解什么类型的事情
人们真的需要看到并服务这些吗？
种子就是你可以从中赚钱的公司。
你为此付出代价。
然后你们就把SST作为开源项目。
是的，公司的历史有点好笑，因为种子最初是建立在
首先。
所以SST并不存在。
这个想法是，好吧，有人在做无服务器的事情。
他们正在使用一个称为无服务器框架的框架。
但是没有真正适合无服务器框架的CI工具。
让我们为此构建一个好的CI工具。
所以种子最初，甚至到今天都是针对另一个框架进行优化的。
它被推出，成长，一直持续到今天。
在某个时候，我们意识到，哦，好吧，即使我们捕获100%现有的无服务器
市场，这是一个好生意，但不是一个不可思议的生意。
我们意识到我们的角色实际上是让更多的人建造无服务器。
并确定，好的，什么停止了？
就像你们一样，是什么阻止了任何一家刚刚起步的公司建设
以这种方式？
答案是，AWS操作复杂。
是啊是啊。
开发人员体验糟透了。
所以这意味着我们需要建立我们自己的框架，让这些东西更容易获得。
一旦我们种得更多，我们就可以回来，再次播种，制造它。
针对SSD进行了更优化。
我们现在开始进入那个阶段。
我认为在今年的下半场，我们将回到种子状态，真正创造
它是SSD的好产品。
不错。
所以你在AWS方面非常有经验。
对于任何查看AWS页面但不知道是什么的人，您有什么提示或技巧吗？
去做还是去哪里？
您是否有任何学习资源或想法来学习和理解AWS
更完整的方式？
是的。
最让我困扰的是我觉得从你签字的那一刻起你就完蛋了
适合AWS，因为即使正确设置帐户，默认路径也不会让您
在错误的道路上。
它让你像我是用户一样进行设置，喜欢创建凭据，喜欢把
它们在一些随机文件中。
实际上有一个非常巧妙的方法来设置所有这些东西。
我在上面做了一个视频，这样人们就可以去查了。
这是你的YouTube？
是的。
这就是YouTube。
我们有大量资源在一个使用SSD的资源上，但也只是使用AWS
理智的方式。
我认为我们有点不同的是，我们不像AWS那样是解决方案架构师。
就像我们没有拿着一堆证书坐在这里做事情一样
就像疯狂复杂的AWS方式。
我们试着看看AWS，试着发现，好吧，这不像最佳实践
喜欢官方的AWS指南。
但对大多数人来说，这是正确的权衡、可访问性和喜欢的东西
实际上是有道理的。
所以我们的很多内容都更适合我，我只是想做点什么。
我试着实际一点，你知道，在可预见的未来，这将是有效的。
所以是的，比如设置它被称为AWS单点登录，这样你就可以登录了。
在AWS或Google帐户中，不要通过它执行所有凭据。
有很多这样的小事我们试图在YouTube中涵盖
我们制作的内容。
这很棘手，我认为没有很多好的内容，你是什么
要求。
有很多AWS的内容，很多都过时了，很多都没有这个。
就像实际的心态一样，我们今年的重点是我们要专注于
更多关于内容的东西，帮助人们做得更好。
框架确实喜欢其中的90%，因为您可以在没有真正理解的情况下开始使用它
随着时间的推移，你会自然而然地学会一些东西。
但就像我说的，即使你注册了，你也可能被误导了
路径。
所以还有很多空白需要填补。
所以现在这是节目的一部分，我们谈论的基本上是我们问你问题。
我们问每个人，事情的类型应该很快，很简单。
回答问题。
所以首先，你用什么样的电脑和设置来处理爱情？
这个问题。
我有一个定制的个人电脑，我已经建造和重建了很多年，有点像一艘船。
DC情况。
它运行Linux。
我已经做了10年左右的全职Linux用户，这让我非常恼火。
我是个很烦人的人。
哇。
你负责哪个区？
当然，我运行ArchLinux，这是运行起来最烦人的操作系统。
你在摇摆什么文本编辑器主题和字体？
所以我使用NeoVim。
主题是东京骑士
这个字体是一个Haskellogue，我想，就像，有一种字体叫做Haskellig和
Haskellogue就像它的修改版本。
我很久以前就找到了它，不记得我为什么选择它，但我在这里。
如果你今天必须从零开始编码，或者如果你给某人建议
挑选要做的事情，你会推荐什么类型的事情？
是的。
这很有趣，因为当我第一次开始编码时，我是通过升C进入的，我想
是一个非常好的入口点。
它感觉很容易，很容易理解，今天我想每个人都通过打字稿进入它，
它实际上看起来和升C一模一样。
您可以将升C代码写入TypeScript文件，它可能会工作。
在我看来，这对我很有效。
我知道很多人担心TypeScript中的类型系统会不堪重负吗？
初学者，我是先写剧本的。
我学习升C的记忆是我真的不知道，这一切对我来说都有意义
结构化我所做的很棒。
所以我认为TypeScript是一个无聊的答案，因为我认为这可能是大多数人会
说。
我认为这是一个很好的入口点。
在网络上做东西也很棒，因为你可以构建东西，你可以查看
马上就去。
我第一次学习的每个人，我都喜欢视觉上看东西的反馈循环。
为此我一直喜欢阿童木。
它让我想起了过去的PHP时代，我只有一个文件，我会
写东西，我可以刷新浏览器并看到它。
我认为阿童木让我想起了很多。
所以我认为TypeScript和Astro的混合是一个很好的组合，因为你没有
拥有你通常会得到的Web开发的复杂性，但你仍然在学习
一旦你走上这条路，你就会需要工具。
你在摇晃什么终端和外壳？
所以我使用了Alacrity，外壳也是ZSH，只是旧的决定，坚持认为它们有效。
对我来说已经很多年了。
所以我没有重新评估。
没有破产。
不要修理它。
是的。
那很有趣。
我们刚刚谈到了敏捷。
我很确定我们称之为敏捷，我的意思是，我可能也说错了。
这些单词你永远不必大声说出来，因为你只是在
屏幕，尤其是这样的词。
是的。
你为什么用那个终端，那是Linux最好的吗？
所以Alacrity，我认为它有很多能量，就像它正在被积极开发一样。
它有点新。
它是用Rust写的，你知道，它为很多人做了很多，但是我们很兴奋。
但是是的，它表现得非常好。
我其实不知道。
我想我曾经使用过一种叫做URVXT的东西，我想它被称为。
老实说，就终端而言，我真的不能。
所以我在Linux中使用了一种叫做i3的东西。
平铺窗口管理器，它基本上把所有东西都放在我的屏幕上。
它是一个模块，不管它是一个浏览器还是一个终端，不管它是什么，管理它。
通过我的键盘，我必须使用鼠标。
所以终端本身并不重要，因为它有点像所有的终端。
你期望的特定功能，比如标签和其他东西，它是在较低的层中挑选出来的。
不错。
是的。
是的。
这真的是应该的方式。
我开始真正投入到让我的整个，哦，整个操作系统，基本上
相同的键盘快捷键来做所有事情，并尝试锁定它，因为如此
我经常想，甚至像，你知道，韦斯和我，我们写这些键盘快捷键，我们设置
专门针对我们的文本编辑器设置这些宏，但不是操作系统范围的。
我相信Linux更好。
那么，在开发的未来，你对什么感到兴奋？
所以我要谈谈Cloudflare，因为我想我对他们的非常感兴趣
路径。
有很多云提供商或试图成为云提供商的人，但是
现实是AWS是唯一真正赚钱的。
你当然可以，Azure赚钱，但这更公平，他们就像货币化
他们已经拥有几十年的客户群。
是的。
就像赚钱一样，让年轻的公司在你的平台上起步
并成长为10亿美元的公司，AWS真的是唯一一个玩这个游戏的人
并赢得它，因为你需要有很多原语才能真正
对你来说是可行的，你知道，就像这些正在运营的上市公司一样
大规模地。
我认为Cloudflare是我看到的第一家真正有机会的公司
以同样的市场占有率。
他们拥有的原语，他们的原语要少得多，但他们正在开始无服务器
首先。
所以他们没有所有这些，我将称之为遗产，而不是服务。
模型。
在现代社会，这没有任何意义。
他们基本上，所以Cloudflare基本上有10个原语，这10个原语
是您构建99%的应用程序所需的一切。
我认为很多人还没有意识到这一点，但今天在技术上是可能的。
我真的很期待新公司意识到这一点，并尝试像完全的Cloudflare一样构建
本地的。
那里有很大的潜力，我想我很高兴看到它会是什么样子。
是的，我已经成为Cloudflare的大用户一段时间了，我已经深入研究了很多
他们的，既有很多他们的托管产品，也有很多他们的专业功能。
以及。
有趣的是，每当我在Twitter上询问Cloudflare的任何功能时，人们
就像，它的域名系统和DDoS分布式拒绝服务攻击保护。
这就是他们对Cloudflare第二人的全部了解。
你不知道他们是一家非常非常大的云公司，我认为他们是
如果还没有的话，在接下来的几年里会真正上升。
是的，我也在他们身上投入了大量资金。
所以我要把它缩小。
我在努力。
这将是我树篱里的东西，我的云火炬位置，以防云火炬主宰它们。
太好了。
好的.
好吧。
哦，不，恶心的照片。
你今天有一张生病的照片给我们吗？
是的，我想我已经谈过了。
所以行星尺度，我们刚才谈到了一点。
是的，我相信很多人已经听说过了，这是一个很棒的解决方案。
我认为有和没有地球规模的系统会是什么样子，非常不同和复杂。
此时，如果要启动新服务或新产品，则需要一个数据库。
再看看行星规模。
它会对你非常有效，并且会对你有效很长一段时间。
所以是的，对他们正在做的事情、路线图和一切都非常非常兴奋。
真是太棒了。
它解决了我整个职业生涯中遇到的问题。
有病。
太棒了。
还有无耻的插头。
你想插上吗？
我们在哪里能找到你？
是的。
所以我主要在推特上。

THDXR是我的用户名。
我正在做一些有趣的事情，我不知道你是否看过，我们宣布
大概一周前。
我们正在为开发者制作一个游戏节目。
所以如果你们还记得HQ琐事，你知道，我希望你的应用程序会点亮
每天一次，每个人都可以看10分钟的游戏节目
参加直播。
我们正在做，我们正在尝试推出这样的东西。
这叫rebase.tv。
你可以在推特或rebase.tv上找到它。
我们还没有推出我们的第一款游戏，但我们正在开发过程中。
该应用程序并进行所有生产，我们希望拥有真正出色的生产质量。
但是，是的，我想有一件事会很有趣，你知道，整个
开发者社区每周同时做一次或其他任何事情。
这太酷了。
是啊，总部来来去去真是太神奇了，对吧？
嗯，顺便说一下，我们必须在节目笔记中分享这个链接。
但是有一个，嗯，有一个非常棒的播客详细介绍了整个
总部兴衰繁荣，总部萧条琐事。
是的。
我认为有一部关于它的纪录片正在制作中。
上周或两周前，当我们考虑总部时，我们有了这个想法，是的，我们真的
巧合的是，有一部新纪录片即将上映，但它可能已经上映了，可能已经上映了
出去。
我认为TikTok也像总部概念一样推出。
它很聪明。
是的。
这是一个，我是说，这很有趣。
有病。
太棒了。
非常感谢你能来。
感谢您对无服务器、AWS和SST世界的所有时间和见解。
非常感谢你能来。
你们这些家伙，你知道，正在搬运你们的一些东西，AWS，你们感到困惑是可以理解的。
是的。
请让我知道。
我有点喜欢帮助人们弄清楚这一点。
自由迁徙，你说。
好吧。
我会带你去的。
好的.
好吧。
再次感谢。
我晚点聊。
去syntax.fm我们所有节目的完整归档。
别忘了订阅你的播客播放器或者发表评论。
如果你喜欢这个节目。